!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js/",n(n.s=1)}([function(e,t,n){"use strict";function o(e){return e*e}function r(e){return Math.sqrt(o(e.x)+o(e.y))}function i(e,t){return{x:e.x+t.x,y:e.y+t.y}}function a(e,t){return{x:e.x/t,y:e.y/t}}Object.defineProperty(t,"__esModule",{value:!0}),t.sqr=o,t.vlen=r,t.vnorm=function(e){return a(e,r(e))},t.vsub=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},t.vplus=i,t.vdiv=a,t.vscale=function(e,t){return{x:e.x*t,y:e.y*t}},t.vavg=function(e,t){return a(i(e,t),2)},t.vint=function(e){return{x:Math.floor(e.x),y:Math.floor(e.y)}},t.vrot90=function(e){return{x:e.y,y:-e.x}}},function(e,t,n){"use strict";var o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=n(3),a=n(4),s=o(n(0)),c=16,l=7,d=9,u=4,h=5;function f(e,t){const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}function p(e){const t=document.getElementById(e),n=t.getContext("2d");return t.width=500,t.height=500,n.fillStyle="white",n.fillRect(0,0,500,500),{c:t,d:n}}function g(e,t){t.d.putImageData(function(e){const t=new ImageData(e.w,e.h);for(let n=0;n<e.w;n++)for(let o=0;o<e.h;o++){const r=o*e.w+n,i=4*(o*e.w+n);t.data[i+0]=17*e.data[r]&255,t.data[i+1]=71*e.data[r]&255,t.data[i+2]=157*e.data[r]&255,t.data[i+3]=e.data[r]?128:0}return t}(e.array),0,0),Object.keys(e.avg).forEach(n=>{const o=e.avg[n];t.d.fillStyle="white",t.d.fillRect(Math.floor(o.x)-3,Math.floor(o.y)-3,6,6)})}function m(e,t){const{d:n}=t;e.edges.forEach(({a:t,b:o,m:r},i)=>{const a=e.vertices[t].p,s=e.vertices[o].p;n.beginPath(),n.moveTo(a.x,a.y),n.quadraticCurveTo(2*r.x-(a.x+s.x)/2,2*r.y-(a.y+s.y)/2,s.x,s.y),n.strokeStyle="black",n.lineWidth=1,n.stroke(),k("renderDebugId")&&(n.beginPath(),n.fillStyle="white",n.arc(r.x,r.y,l,0,2*Math.PI),n.fill(),n.textAlign="center",n.textBaseline="middle",n.font="bold 10px arial",n.fillStyle="#404",n.fillText(i+"",r.x,r.y))});for(let[t,{p:o}]of Object.entries(e.vertices))n.fillStyle="#fed",3!=e.vertices[t].edges.length&&(n.fillStyle="red"),t==e.rootData.root&&(n.fillStyle="white"),n.strokeStyle="black",n.lineWidth=1,n.beginPath(),n.arc(o.x,o.y,d,0,2*Math.PI),n.fill(),n.stroke(),k("renderDebugId")&&(n.textAlign="center",n.textBaseline="middle",n.font="bold 9px arial",n.fillStyle="#000",n.fillText(t,o.x,o.y));k("renderLambda")&&(n.save(),n.fillStyle="white",n.globalAlpha=.2,n.fillRect(0,0,500,500),n.restore())}function y(e,t,n){e.strokeStyle="black",e.lineWidth=1,e.stroke(),e.save(),e.translate(t.x,t.y),e.rotate(n),e.beginPath(),e.moveTo(0,-3),e.lineTo(2,0),e.lineTo(0,3),e.lineTo(8,0),e.fillStyle="black",e.fill(),e.restore()}function v(e,t,n,o){y(e,t,Math.atan2(o.y-n.y,o.x-n.x))}function b(e,t){const n=new Path2D;return n.arc(e.x,e.y,t,0,2*Math.PI),n}function x(e,t){const n=b(t,u);e.fillStyle="white",e.strokeStyle="gray",e.lineWidth=1,e.fill(n),e.stroke(n)}function w(e,t){const{d:n}=t;e.edges.forEach(t=>{if(null==t)return;const{a:o,b:r,m:i,tgt:a}=t;if(null==e.vertices[o])return;if(null==e.vertices[r])return;const s=e.vertices[o].p,c=e.vertices[r].p;n.beginPath(),n.moveTo(s.x,s.y),n.quadraticCurveTo(2*i.x-(s.x+c.x)/2,2*i.y-(s.y+c.y)/2,c.x,c.y),"b"==a?v(n,i,s,c):v(n,i,c,s)});const o=new Path2D,r=e.vertices[e.rootData.root].p,i=s.vplus(r,s.vscale(e.rootData.rootDir,20));o.moveTo(r.x,r.y),o.lineTo(i.x,i.y),n.strokeStyle="black",n.lineWidth=1,n.stroke(o),y(n,i,Math.atan2(e.rootData.rootDir.y,e.rootData.rootDir.x));for(let[t,o]of Object.entries(e.vertices)){if(null==o)return;const{p:r,t:i}=o;n.fillStyle=t==e.rootData.root?"#aaf":"app"==i?"white":"black",n.strokeStyle="black",n.lineWidth=1,n.beginPath(),n.arc(r.x,r.y,d,0,2*Math.PI),n.fill(),n.stroke()}if(k("renderRootChoices"))for(const t of e.rootData.otherRoots)x(n,t.p);document.getElementById("lambda").innerText=function e(t,n,o,r){switch(o.t){case"lam":{const i=String.fromCharCode(t+97),a="lam"==r?"":"Î»",s=e(t+1,n.concat([i]),o.b,"lam"),c=a+i+s.s;return{s:"lam"==r||"top"==r?c:"("+c+")",counter:s.counter}}case"app":{const i="lam"==r?".":"",a=e(t,n.slice(0,o.split),o.f,"appl"),s=e(a.counter,n.slice(o.split),o.arg,"appr"),c=i+a.s+" "+s.s;return{s:"appr"==r?"("+c+")":c,counter:s.counter}}case"var":return{s:n[0],counter:t}}}(0,[],function e(t){switch(t.t){case"lam":{const{e:n,size:o}=e(t.b);return{e:{t:"lam",b:n},size:o-1}}case"app":{const{e:n,size:o}=e(t.f),{e:r,size:i}=e(t.arg);return{e:{t:"app",f:n,arg:r,split:o},size:o+i}}case"var":return{e:t,size:1}}}(e.exp).e,"top").s}function k(e){return document.getElementById(e).checked}const j=new class{compute(){this.conj=void 0,this.graph=void 0,this.rootedGraph=void 0,this.lambdaGraph=void 0;const{c1:e,c2:t}=this;document.getElementById("lambda").innerText="",t.d.clearRect(0,0,t.c.width,t.c.height);const n=e.d.getImageData(0,0,e.c.width,e.c.height),o=this.conj=r.findConjoined(n);k("renderDebug")&&g(o,t);const a=this.graph=i.findGraph(o),c=this.rootedGraph=this.forceRoot?i.breakGraphAtEdge(a,this.forceRoot):i.findRootedGraph(a);if(k("renderCyclic")&&function(e,t){const{d:n}=t;for(const t of Object.values(e.vertices)){const o=["red","green","blue"];t.edges.length<=3&&t.edges.forEach((r,i)=>{const a=e.edges[r.i].m,c=s.vplus(s.vscale(s.vnorm(s.vsub(a,t.p)),15),t.p);n.beginPath(),n.moveTo(t.p.x,t.p.y),n.lineTo(c.x,c.y),n.strokeStyle=o[i],n.lineWidth=3,n.lineCap="round",n.stroke()})}}(c,t),k("renderGraph")&&m(c,t),k("renderLambda"))try{w(this.lambdaGraph=i.findLambdaGraph(c),t)}catch(e){document.getElementById("lambda").innerHTML='<font color="red">All nodes must have exactly three edges to compute lambda graph.</font>',console.log(e),m(c,t)}}constructor(){this.c1=p("c1"),this.c2=p("c2")}paint(e){const{c1:t}=this;document.getElementById("examples").selectedIndex=-1,this.forceRoot=void 0,e=s.vint(e);const n=Array.from(document.getElementsByName("paint")).find(e=>e.checked).value,o=function(e){switch(e){case"node":return c;case"edge":return c/2;case"erase":return 2*c}}(n);t.d.fillStyle=function(e){switch(e){case"node":return"red";case"edge":return"blue";case"erase":return"white"}}(n),t.d.fillRect(e.x-o/2,e.y-o/2,o,o)}paintLine(e,t){if(Math.max(Math.abs(e.x-t.x),Math.abs(e.y-t.y))<c/2)this.paint(t);else{const n={x:Math.floor((e.x+t.x)/2),y:Math.floor((e.y+t.y)/2)};this.paintLine(e,n),this.paintLine(n,t)}}go(){const{c1:e,c2:t}=this;e.d.drawImage(E.data.img.example1,0,0),["renderDebug","renderDebugId","renderCyclic","renderGraph","renderLambda","renderRootChoices"].forEach(e=>{document.getElementById(e).addEventListener("change",()=>this.compute())});let n=void 0;const o=t=>{const o=f(t,e.c);null!=n?this.paintLine(n,o):this.paint(o),n=o},r=e=>{document.removeEventListener("mousemove",o),document.removeEventListener("mouseup",o),this.compute()};function a(){e.d.fillStyle="white",e.d.fillRect(0,0,e.c.width,e.c.height)}document.getElementById("clear").addEventListener("click",()=>{a(),this.compute()});const s=document.getElementById("examples");s.addEventListener("change",()=>{this.forceRoot=void 0,e.d.drawImage(E.data.img[s.value],0,0),this.compute()}),e.c.addEventListener("mousedown",t=>{if(1!=t.buttons)return;const i=f(t,e.c);n=i,this.paint(i),document.addEventListener("mousemove",o),document.addEventListener("mouseup",r),t.stopPropagation(),t.preventDefault()}),t.c.addEventListener("mousedown",e=>{if(null!=this.lambdaGraph&&k("renderRootChoices")){const n=f(e,t.c),o=this.lambdaGraph.vertices[this.lambdaGraph.rootData.root].p;if(t.d.isPointInPath(b(o,d+h),n.x,n.y)){const e=this.lambdaGraph.rootData.brokenEdge;this.forceRoot={i:e.i,which:i.opposite(e.which)},this.compute()}else this.lambdaGraph.rootData.otherRoots.forEach(e=>{t.d.isPointInPath(b(e.p,u+h),n.x,n.y)&&(this.forceRoot=e.es,this.compute())})}e.stopPropagation(),e.preventDefault()}),document.addEventListener("paste",t=>{Array.from(t.clipboardData.items).forEach(t=>{if("file"===t.kind){const n=t.getAsFile(),o=new FileReader;o.onload=(t=>{const n=new Image;"string"==typeof o.result&&(n.src=o.result,n.addEventListener("load",()=>{a(),e.d.drawImage(n,Math.floor((e.c.width-n.width)/2),Math.floor((e.c.height-n.height)/2)),this.compute()}))}),o.readAsDataURL(n)}})}),this.compute()}};window.app=j;const E=new a.Loader;E.image("./img/example1.png","example1"),E.image("./img/example2.png","example2"),E.image("./img/example3.png","example3"),E.image("./img/cube.png","cube"),E.image("./img/dodecahedron.png","dodecahedron"),E.image("./img/prism.png","prism"),E.image("./img/tetrahedron.png","tetrahedron"),E.image("./img/tutte.png","tutte"),E.done(()=>j.go())},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o={r:255,g:255,b:255},r={r:255,g:0,b:0},i={r:0,g:0,b:255};function a(e,t,n){const o=4*(n*e.width+t);return{r:e.data[o],g:e.data[o+1],b:e.data[o+2]}}function s(e,t,n){const o=n*e.w+t;return e.data[o]}function c(e,t,n,o){const r=n*e.w+t;e.data[r]=o}function l(e,t){return e.r==t.r&&e.g==t.g&&e.b==t.b}t.findConjoined=function(e){let t=1;const n={},d={},u={};function h(e,t){d[t]||(d[t]={x:0,y:0},u[t]=0),d[t].x+=e.x,d[t].y+=e.y,u[t]++}function f(o,d,u){const f=t++;var p;n[f]=l(p=u,r)?"node":l(p,i)?"edge":"unknown";const m=[{x:o,y:d}];let y;for(;y=m.pop();){const{x:t,y:n}=y;s(g,t,n)||l(u,a(e,t,n))&&(c(g,t,n,f),h({x:t,y:n},f),m.push({x:t+1,y:n}),m.push({x:t-1,y:n}),m.push({x:t,y:n+1}),m.push({x:t,y:n-1}))}}const p=new Uint16Array(e.width*e.height),g={w:e.width,h:e.height,data:p};for(let t=0;t<g.w;t++)for(let n=0;n<g.h;n++){g.w;const r=a(e,t,n);l(r,o)||s(g,t,n)||f(t,n,r)}for(let e=1;e<t;e++)d[e].x/=u[e],d[e].y/=u[e];const m={};function y(e,t){e!=t&&(m[e]||(m[e]={}),m[e][t]=!0,m[t]||(m[t]={}),m[t][e]=!0)}for(let e=0;e<g.w-1;e++)for(let t=0;t<g.h-1;t++){const n=s(g,e,t);if(n){m[n]||(m[n]={});const o=s(g,e+1,t);o&&y(n,o);const r=s(g,e,t+1);r&&y(n,r)}}return{array:g,marks:n,avg:d,adjacent:m,numMarks:t-1}}},function(e,t,n){"use strict";var o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const r=o(n(0)),i=12;function a(e){return"a"==e?"b":"a"}function s(e,t){const n=t.which,o=a(n),s=t.i,c=e.edges[t.i],l=c[n],d=e.vertices[l],u=c.m,h=c[o],f=e.vertices[h],p=e.edges.length;e.edges[s][o]=h,e.edges[s][n]="*",e.edges[s].m=r.vavg(f.p,u);const g={a:"",b:"",m:r.vavg(u,d.p)};g[o]="*",g[n]=l;const m=e.edges.concat([g]),y=[{i:s,which:n},{i:p,which:o}],v={};for(let[t,n]of Object.entries(e.vertices))v[t]=n;v[l]={p:v[l].p,edges:v[l].edges.map(e=>e.i==s?{i:p,which:e.which}:e)},v["*"]={p:u,edges:y};const b=[];e.edges.forEach((n,o)=>{if(o==t.i)return;const a=e.vertices[n.a].p,s=e.vertices[n.b].p,c=r.vrot90(r.vscale(r.vnorm(r.vsub(a,s)),i));b.push({p:r.vplus(n.m,c),es:{i:o,which:"a"}}),b.push({p:r.vsub(n.m,c),es:{i:o,which:"b"}})});const x=r.vrot90(r.vnorm(r.vsub(d.p,f.p)));return{edges:m,vertices:v,rootData:{root:"*",otherRoots:b,rootDir:x,brokenEdge:t}}}function c(e,t){return e.edges[t.i][a(t.which)]}t.findGraph=function(e){const t={},n=[];for(let o=1;o<e.numMarks+1;o++)if("node"==e.marks[o])t[o]={p:e.avg[o],edges:[]};else if("edge"==e.marks[o]){const t=Object.keys(e.adjacent[o]);2==t.length&&n.push({a:t[0],b:t[1],m:e.avg[o]})}n.forEach((e,n)=>{t[e.a].edges.push({i:n,which:"a"}),t[e.b].edges.push({i:n,which:"b"})});for(let e of Object.values(t))e.edges.sort((t,o)=>{const r=n[t.i].m,i=n[o.i].m;return Math.atan2(r.x-e.p.x,r.y-e.p.y)-Math.atan2(i.x-e.p.x,i.y-e.p.y)});return{vertices:t,edges:n}},t.opposite=a,t.breakGraphAtEdge=s,t.findRootedGraph=function(e){const t=Object.keys(e.vertices);t.sort((t,n)=>e.vertices[t].p.y-e.vertices[n].p.y);const n=t[0],o=e.vertices[n].edges[0];return s(e,o)},t.findLambdaGraph=function(e){function t(t){s[t.i]=Object.assign({},e.edges[t.i],{tgt:t.which})}function n(a,l){if(r--<=0)return{t:"var"};if(null!=i[a])return{t:"var"};const d=e.vertices[a].edges,u=d.findIndex(e=>e.i==l.i),h=d[(u+1)%3],f=d[(u+2)%3];return t(f),function(t,n){const o={},r=[t];let i;for(;i=r.pop();){if(i==n)return!0;o[i]||(o[i]=!0,e.vertices[i].edges.forEach(t=>{null==s[t.i]&&r.push(c(e,t))}))}return!1}(a,c(e,f))?o(a,h,f):function(o,r,a){const s=e.vertices[o];i[o]=Object.assign({},s,{t:"app"}),t(r);const l=n(c(e,r),r);return{t:"app",f:n(c(e,a),a),arg:l}}(a,h,f)}function o(t,o,r){const l=e.vertices[t];var d;return i[t]=Object.assign({},l,{t:"lam"}),s[(d=o).i]=Object.assign({},e.edges[d.i],{tgt:a(d.which)}),{t:"lam",b:n(c(e,r),r)}}let r=100;const i={},s=[];let l=e.rootData.root,d=e.vertices[l];const u=d.edges[0],h=d.edges[1];t(h);const f=o(l,u,h);return{vertices:i,edges:s,rootData:e.rootData,exp:f}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Loader=class{constructor(){this.k=(()=>{}),this.count=0,this.tasks=[],this.data={img:{},json:{}}}add(e){this.tasks.push(e),this.count--}done(e){this.k=e,this.tasks.forEach(e=>e())}image(e,t){this.add(()=>{var n=new Image;n.src=e,n.onload=(()=>{this.data.img[t]=n,this.succ()})})}succ(){0==++this.count&&this.k(this.data)}json_file(e,t){null==t&&(t=e+".json"),this.add(()=>{const n=new Request(t);fetch(n).then(e=>e.json()).then(t=>{this.data.json[e]=t,this.succ()}).catch(console.error)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,