!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/js/",r(r.s=1)}([function(t,e,r){"use strict";function n(t){return t*t}function i(t){return Math.sqrt(n(t.x)+n(t.y))}function o(t,e){return{x:t.x+e.x,y:t.y+e.y}}function s(t,e){return{x:t.x/e,y:t.y/e}}Object.defineProperty(e,"__esModule",{value:!0}),e.sqr=n,e.vm=function(t,e){return{x:e(t.x),y:e(t.y)}},e.vm2=function(t,e,r){return{x:r(t.x,e.x),y:r(t.y,e.y)}},e.vm3=function(t,e,r,n){return{x:n(t.x,e.x,r.x),y:n(t.y,e.y,r.y)}},e.vmn=function(t,e){return{x:e(t.map(t=>t.x)),y:e(t.map(t=>t.y))}},e.vlen=i,e.vnorm=function(t){return s(t,i(t))},e.vsub=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},e.vplus=o,e.vdiv=s,e.vscale=function(t,e){return{x:t.x*e,y:t.y*e}},e.vavg=function(t,e){return s(o(t,e),2)},e.vint=function(t){return{x:Math.floor(t.x),y:Math.floor(t.y)}},e.vrot90=function(t){return{x:t.y,y:-t.x}},e.angle=function(t){return Math.atan2(t.x,t.y)},e.shallowClone=function(t){return Object.assign({},t)}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const i=r(2),o=r(3),s=r(5),a=r(6),c=n(r(0)),l=r(7),h=16,d=7,u=9,p=4,g=5;function m(t,e){const r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}function f(t){const e=document.getElementById(t),r=e.getContext("2d");return e.width=500,e.height=500,r.fillStyle="white",r.fillRect(0,0,500,500),{c:e,d:r}}function _(t,e){e.d.putImageData(function(t){const e=new ImageData(t.w,t.h);for(let r=0;r<t.w;r++)for(let n=0;n<t.h;n++){const i=n*t.w+r,o=4*(n*t.w+r);e.data[o+0]=17*t.data[i]&255,e.data[o+1]=71*t.data[i]&255,e.data[o+2]=157*t.data[i]&255,e.data[o+3]=t.data[i]?128:0}return e}(t.array),0,0),Object.keys(t.avg).forEach(r=>{const n=t.avg[r];e.d.fillStyle="white",e.d.fillRect(Math.floor(n.x)-3,Math.floor(n.y)-3,6,6)})}function v(t,e){const{d:r}=e;for(const[e,n]of Object.entries(t.edges)){const{a:t,b:i}=n;r.beginPath(),n.draw(r),r.strokeStyle="black",r.lineWidth=1,r.stroke(),w("renderDebugId")&&n.getArrowHeads("a").forEach(t=>{const n=t.p;r.beginPath(),r.fillStyle="white",r.arc(n.x,n.y,d,0,2*Math.PI),r.fill(),r.textAlign="center",r.textBaseline="middle",r.font="bold 10px arial",r.fillStyle="#404",r.fillText(e+"",n.x,n.y)})}for(let[e,{p:n}]of Object.entries(t.vertices))r.fillStyle="#fed",3!=t.vertices[e].edges.length&&(r.fillStyle="red"),e==t.rootData.root&&(r.fillStyle="white"),r.strokeStyle="black",r.lineWidth=1,r.beginPath(),r.arc(n.x,n.y,u,0,2*Math.PI),r.fill(),r.stroke(),w("renderDebugId")&&(r.textAlign="center",r.textBaseline="middle",r.font="bold 9px arial",r.fillStyle="#000",r.fillText(e,n.x,n.y));w("renderLambda")&&(r.save(),r.fillStyle="white",r.globalAlpha=.2,r.fillRect(0,0,500,500),r.restore())}function y(t,e,r){t.save(),t.beginPath(),t.translate(e.x,e.y),t.rotate(r),t.beginPath(),t.moveTo(0,-3),t.lineTo(2,0),t.lineTo(0,3),t.lineTo(8,0),t.fill(),t.restore()}function b(t,e){const r=new Path2D;return r.arc(t.x,t.y,e,0,2*Math.PI),r}function x(t,e){const r=b(e,p);t.fillStyle="white",t.strokeStyle="gray",t.lineWidth=1,t.fill(r),t.stroke(r)}function w(t){return document.getElementById(t).checked}const E=new class{compute(){this._compute(this.c1,this.c2)}_compute(t,e){this.conj=void 0,this.graph=void 0,this.coalescedGraph=void 0,this.rootedGraph=void 0,this.lambdaGraph=void 0,document.getElementById("lambda").innerText="",e.d.clearRect(0,0,e.c.width,e.c.height);const r=t.d.getImageData(0,0,t.c.width,t.c.height),n=this.conj=i.findConjoined(r);w("renderDebug")&&_(n,e);const s=this.graph=o.findGraph(n),l=this.coalescedGraph=o.coalesceGraph(s),h=this.rootedGraph=this.forceRoot?o.breakGraphAtEdge(l,this.forceRoot):o.findRootedGraph(l);if(w("renderCyclic")&&function(t,e){const{d:r}=e;for(const e of Object.values(t.vertices)){const n=["red","green","blue"];e.edges.length<=3&&e.edges.forEach((i,o)=>{const s=c.vplus(e.p,c.vscale(t.edges[i.i].getVelocity(i.which),15));r.beginPath(),r.moveTo(e.p.x,e.p.y),r.lineTo(s.x,s.y),r.strokeStyle=n[o],r.lineWidth=3,r.lineCap="round",r.stroke()})}}(h,e),w("renderGraph")&&v(h,e),w("renderLambda"))try{!function(t,e){const{d:r}=e;for(const[e,n]of Object.entries(t.edges)){if(null==n)return;const{e:i,tgt:s}=n,{a:a,b:c}=i;if(null==t.vertices[a])return;if(null==t.vertices[c])return;t.vertices[a].p,t.vertices[c].p,r.beginPath(),i.draw(r);let l="black";if(w("renderVarEdges")){const r=t.vertices[i[o.opposite(s)]];"lam"==r.t&&r.varEdge.i==e&&(l="#a4bbd3")}r.strokeStyle=l,r.lineWidth=1,r.stroke(),r.fillStyle=l,i.getArrowHeads(s).forEach(t=>{y(r,t.p,t.theta)})}const n=t.vertices[t.rootData.root].p,i=c.vplus(n,c.vscale(t.rootData.rootDir,20));r.beginPath(),r.moveTo(n.x,n.y),r.lineTo(i.x,i.y),r.strokeStyle="black",r.lineWidth=1,r.stroke(),r.fillStyle="black",y(r,i,Math.atan2(t.rootData.rootDir.y,t.rootData.rootDir.x));for(let[e,n]of Object.entries(t.vertices)){if(null==n)return;const{p:i,t:o}=n;r.fillStyle=e==t.rootData.root?"#aaf":"app"==o?"white":"black",r.strokeStyle="black",r.lineWidth=1,r.beginPath(),r.arc(i.x,i.y,u,0,2*Math.PI),r.fill(),r.stroke(),w("renderVarNames")&&"lam"==n.t&&(r.fillStyle=e==t.rootData.root?"black":"white",r.textAlign="center",r.textBaseline="middle",r.font="bold 12px arial",r.fillText(a.nameFromNum(n.name),i.x,i.y))}if(w("renderRootChoices"))for(const e of t.rootData.otherRoots)x(r,e.p);document.getElementById("lambda").innerText=a.stringifyLam(t.exp)}(this.lambdaGraph=o.findLambdaGraph(h),e)}catch(t){console.log(t),document.getElementById("lambda").innerHTML='<font color="red">All nodes must have exactly three edges to compute lambda graph.</font>',v(h,e)}}constructor(){this.c1=f("c1"),this.c2=f("c2")}getExamples(){return document.getElementById("examples")}invalidate(){this.forceRoot=void 0,this.getExamples().selectedIndex=-1}paint(t){const{c1:e}=this;this.getExamples(),this.invalidate(),t=c.vint(t);const r=Array.from(document.getElementsByName("paint")).find(t=>t.checked).value,n=function(t){switch(t){case"node":return h;case"edge":return h/2;case"erase":return 2*h}}(r);e.d.fillStyle=function(t){switch(t){case"node":return"red";case"edge":return"blue";case"erase":return"white"}}(r),e.d.fillRect(t.x-n/2,t.y-n/2,n,n)}paintLine(t,e){if(Math.max(Math.abs(t.x-e.x),Math.abs(t.y-e.y))<h/2)this.paint(e);else{const r={x:Math.floor((t.x+e.x)/2),y:Math.floor((t.y+e.y)/2)};this.paintLine(t,r),this.paintLine(r,e)}}go(){const{c1:t,c2:e}=this;t.d.drawImage(k.data.img.example1,0,0),["renderDebug","renderDebugId","renderCyclic","renderGraph","renderLambda","renderRootChoices","renderVarNames","renderVarEdges"].forEach(t=>{document.getElementById(t).addEventListener("change",()=>this.compute())});let r=void 0;const n=e=>{const n=m(e,t.c);null!=r?this.paintLine(r,n):this.paint(n),r=n},i=t=>{document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",n),this.compute()};function s(){t.d.fillStyle="white",t.d.fillRect(0,0,t.c.width,t.c.height)}document.getElementById("clear").addEventListener("click",()=>{s(),this.invalidate(),this.compute()}),document.getElementById("exportSvg").addEventListener("click",()=>{const t=new l(e.c.width,e.c.height);this._compute(this.c1,{c:e.c,d:t}),function(t,e){const r=new Blob([t],{type:e}),n=document.createElement("a");if(n.href=window.URL.createObjectURL(r),n.download="lambda-map.svg",document.createEvent){const t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(t)}else n.click()}(t.getSerializedSvg(),"image/svg")});const a=document.getElementById("examples");a.addEventListener("change",()=>{this.forceRoot=void 0,t.d.drawImage(k.data.img[a.value],0,0),this.compute()}),t.c.addEventListener("mousedown",e=>{if(1!=e.buttons)return;const o=m(e,t.c);r=o,this.paint(o),document.addEventListener("mousemove",n),document.addEventListener("mouseup",i),e.stopPropagation(),e.preventDefault()}),e.c.addEventListener("mousedown",t=>{if(null!=this.lambdaGraph&&w("renderRootChoices")){const r=m(t,e.c),n=this.lambdaGraph.vertices[this.lambdaGraph.rootData.root].p;if(e.d.isPointInPath(b(n,u+g),r.x,r.y)){const t=this.lambdaGraph.rootData.brokenEdge;this.forceRoot={i:t.i,which:o.opposite(t.which)},this.compute()}else this.lambdaGraph.rootData.otherRoots.forEach(t=>{e.d.isPointInPath(b(t.p,p+g),r.x,r.y)&&(this.forceRoot=t.es,this.compute())})}t.stopPropagation(),t.preventDefault()}),document.addEventListener("paste",e=>{Array.from(e.clipboardData.items).forEach(e=>{if("file"===e.kind){const r=e.getAsFile(),n=new FileReader;n.onload=(e=>{const r=new Image;"string"==typeof n.result&&(r.src=n.result,r.addEventListener("load",()=>{s(),t.d.drawImage(r,Math.floor((t.c.width-r.width)/2),Math.floor((t.c.height-r.height)/2)),function(t){const e=t.d.getImageData(0,0,t.c.width,t.c.height);for(let r=0;r<t.c.width;r++)for(let n=0;n<t.c.height;n++){const i=4*(t.c.width*n+r),[o,s,a]=[e.data[i],e.data[i+1],e.data[i+2]];let c=255,l=255,h=255;(o>s||a>s)&&(o>a?(l=0,h=0):(c=0,l=0)),e.data[i]=c,e.data[i+1]=l,e.data[i+2]=h,e.data[i+3]=255}t.d.putImageData(e,0,0)}(t),this.invalidate(),this.compute()}))}),n.readAsDataURL(r)}})}),this.compute()}};window.app=E;const k=new s.Loader;k.image("./img/example1.png","example1"),k.image("./img/example2.png","example2"),k.image("./img/example3.png","example3"),k.image("./img/example4.png","example4"),k.image("./img/cube.png","cube"),k.image("./img/dodecahedron.png","dodecahedron"),k.image("./img/prism.png","prism"),k.image("./img/tetrahedron.png","tetrahedron"),k.image("./img/tutte.png","tutte"),k.image("./img/petersen.png","petersen"),k.image("./img/virtual.png","virtual"),k.done(()=>E.go());r(8).phonyValue},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n={r:255,g:255,b:255},i={r:255,g:0,b:0},o={r:0,g:0,b:255};function s(t,e,r){const n=4*(r*t.width+e);return{r:t.data[n],g:t.data[n+1],b:t.data[n+2]}}function a(t,e,r){const n=r*t.w+e;return t.data[n]}function c(t,e,r,n){const i=r*t.w+e;t.data[i]=n}function l(t,e){return t.r==e.r&&t.g==e.g&&t.b==e.b}e.findConjoined=function(t){let e=1;const r={},h={},d={};function u(t,e){h[e]||(h[e]={x:0,y:0},d[e]=0),h[e].x+=t.x,h[e].y+=t.y,d[e]++}function p(n,h,d){const p=e++;var g;r[p]=l(g=d,i)?"node":l(g,o)?"edge":"unknown";const f=[{x:n,y:h}];let _;for(;_=f.pop();){const{x:e,y:r}=_;a(m,e,r)||l(d,s(t,e,r))&&(c(m,e,r,p),u({x:e,y:r},p),f.push({x:e+1,y:r}),f.push({x:e-1,y:r}),f.push({x:e,y:r+1}),f.push({x:e,y:r-1}))}}const g=new Uint16Array(t.width*t.height),m={w:t.width,h:t.height,data:g};for(let e=0;e<m.w;e++)for(let r=0;r<m.h;r++){m.w;const i=s(t,e,r);l(i,n)||a(m,e,r)||p(e,r,i)}for(let t=1;t<e;t++)h[t].x/=d[t],h[t].y/=d[t];const f={};function _(t,e){t!=e&&(f[t]||(f[t]={}),f[t][e]=!0,f[e]||(f[e]={}),f[e][t]=!0)}for(let t=0;t<m.w-1;t++)for(let e=0;e<m.h-1;e++){const r=a(m,t,e);if(r){f[r]||(f[r]={});const n=a(m,t+1,e);n&&_(r,n);const i=a(m,t,e+1);i&&_(r,i)}}return{array:m,marks:r,avg:h,adjacent:f,numMarks:e-1}}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const i=r(4),o=n(r(0));function s(t){return"a"==t?"b":"a"}function a(t,e){return t.edges[e.i][s(e.which)]}function c(t,e,r,n){return{p:t.p,edges:t.edges.map(t=>t.i==e?{i:r,which:null==n?t.which:n}:t)}}function l(t,e){const r=e.which,n=s(r),a=e.i,l=t.edges[e.i],h=l[r],d=t.vertices[h],u=l.getBreakPoint(),p=l[n],g=t.vertices[p],m=t.nextEdge+"",f=o.shallowClone(t.vertices),_=o.shallowClone(t.edges),v=[{i:a,which:r},{i:m,which:n}];f[h]=c(f[h],a,m),f["*"]={p:u,edges:v},_[a]="a"==n?new i.OneEdge(f,{a:p,b:"*",m:o.vavg(g.p,u)}):new i.OneEdge(f,{a:"*",b:p,m:o.vavg(g.p,u)});const y={a:"",b:"",m:o.vavg(u,d.p)};y[n]="*",y[r]=h,_[m]=new i.OneEdge(f,y);const b=[];for(const[r,n]of Object.entries(t.edges))r!=e.i&&b.push.apply(b,n.getRootChoices(r));const x=o.vrot90(o.vnorm(o.vsub(d.p,g.p)));return{edges:_,vertices:f,nextEdge:t.nextEdge+1,rootData:{root:"*",otherRoots:b,rootDir:x,brokenEdge:e}}}e.opposite=s,e.findGraph=function(t){const e={},r=[];for(let n=1;n<t.numMarks+1;n++)if("node"==t.marks[n])e[n]={p:t.avg[n],edges:[]};else if("edge"==t.marks[n]){const e=Object.keys(t.adjacent[n]);2==e.length&&r.push({a:e[0],b:e[1],m:t.avg[n]})}r.forEach((t,r)=>{e[t.a].edges.push({i:r+"",which:"a"}),e[t.b].edges.push({i:r+"",which:"b"})});const n={};for(let[t,o]of r.entries())n[t]=new i.OneEdge(e,o);for(let t of Object.values(e))t.edges.sort((t,e)=>{const r=n[t.i].getVelocity(t.which),i=n[e.i].getVelocity(e.which);return o.angle(r)-o.angle(i)});return{vertices:e,edges:n,nextEdge:r.length}},e.coalesceGraph=function(t){let e=t.nextEdge;const r=o.shallowClone(t.vertices),n=o.shallowClone(t.edges);function a(t,o){const a=n[t.i],l=n[o.i],h=a[s(t.which)],d=l[s(o.which)],u=r[h],p=r[d],g="b"==t.which?a:a.reverse(),m="a"==o.which?l:l.reverse(),f=e+++"";r[h]=c(u,t.i,f,"a"),r[d]=c(p,o.i,f,"b"),n[f]=new i.MultiEdge(g,m),delete n[t.i],delete n[o.i]}for(const e of Object.keys(t.vertices)){const t=r[e];2==t.edges.length?(delete r[e],a(t.edges[0],t.edges[1])):4==t.edges.length&&(delete r[e],a(t.edges[0],t.edges[2]),a(t.edges[1],t.edges[3]))}return{vertices:r,edges:n,nextEdge:e}},e.breakGraphAtEdge=l,e.findRootedGraph=function(t){const e=Object.keys(t.vertices);e.sort((e,r)=>t.vertices[e].p.y-t.vertices[r].p.y);const r=e[0],n=t.vertices[r].edges[0];return l(t,n)},e.findLambdaGraph=function(t){let e=0;function r(e){l[e.i]={e:t.edges[e.i],tgt:e.which}}function n(e,s){if(o--<=0)return{t:"error"};if(null!=c[e]){const t=c[e];return"lam"==t.t?{t:"var",name:t.name}:{t:"error"}}const h=t.vertices[e].edges,d=h.findIndex(t=>t.i==s.i),u=h[(d+1)%3],p=h[(d+2)%3];return r(p),function(e,r){const n={},i=[e];let o;for(;o=i.pop();){if(o==r)return!0;n[o]||(n[o]=!0,t.vertices[o].edges.forEach(e=>{null==l[e.i]&&i.push(a(t,e))}))}return!1}(e,a(t,p))?i(e,u,p):function(e,i,o){const s=t.vertices[e];c[e]=Object.assign({},s,{t:"app"}),r(i);const l=n(a(t,o),o),h=n(a(t,i),i);return{t:"app",f:l,arg:h}}(e,u,p)}function i(r,i,o){const h=e++,d=t.vertices[r];var u;return c[r]=Object.assign({},d,{t:"lam",name:h,varEdge:i}),l[(u=i).i]={e:t.edges[u.i],tgt:s(u.which)},{t:"lam",b:n(a(t,o),o),name:h}}let o=100;const c={},l={};let h=t.rootData.root,d=t.vertices[h];const u=d.edges[0],p=d.edges[1];r(p);const g=i(h,u,p);return{vertices:c,edges:l,rootData:t.rootData,exp:g}}},function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),o=12,s=1,a=.5;function c(t){return{va:t.vb,vb:t.va,m:t.m}}class l{constructor(t,e,r,n,i){this.a=t,this.b=e,this.va=r,this.vb=n,this.m=i}reverse(){const{a:t,b:e,va:r,vb:n,m:i}=this;return new l(e,t,n,r,i)}draw(t){const{va:e,vb:r}=this;t.moveTo(e.x,e.y),t.quadraticCurveTo(2*this.m.x-(e.x+r.x)/2,2*this.m.y-(e.y+r.y)/2,r.x,r.y)}getRootChoices(t){const{va:e,vb:r}=this,n=i.vrot90(i.vscale(i.vnorm(i.vsub(e,r)),o));return[{p:i.vplus(this.m,n),es:{i:t,which:"a"}},{p:i.vsub(this.m,n),es:{i:t,which:"b"}}]}getBreakPoint(){return this.m}getVelocity(t){const{va:e,vb:r}=this,n=this["a"==t?"va":"vb"],o=i.vmn([this.m,e,r],([t,e,r])=>2*t-(e+r)/2);return i.vnorm(i.vsub(o,n))}getArrowHeads(t){const{va:e,vb:r}=this,n=("a"==t?.5:1.5)*Math.PI-i.angle(i.vsub(e,r));return[{p:this.m,theta:n}]}getSegments(){return[{va:this.va,vb:this.vb,m:this.m}]}}class h{constructor(t){this.a=t.a,this.b=t.b,this.segs=t.segs}reverse(){return new h({a:this.b,b:this.a,segs:this.segs.map(c).reverse()})}draw(t){const e=this.getCubics();t.moveTo(e[0].A.x,e[0].A.y),e.forEach((e,r)=>{t.bezierCurveTo(e.B.x,e.B.y,e.C.x,e.C.y,e.D.x,e.D.y)})}getArrowHeads(t){return this.getCubics().map(e=>{const{A:r,B:n,C:o,D:s}=e,a=i.vmn([r,n,o,s],([t,e,r,n])=>(t+3*e+3*r+n)/8),c=i.vmn([r,n,o,s],([t,e,r,n])=>(3*t+3*e-3*r-3*n)/4);return{p:a,theta:("a"==t?.5:1.5)*Math.PI-i.angle(c)}})}getRootChoices(t){const{va:e,vb:r,m:n}=this.segs[0],s=i.vrot90(i.vscale(i.vnorm(i.vsub(e,r)),o));return[{p:i.vplus(n,s),es:{i:t,which:"a"}},{p:i.vsub(n,s),es:{i:t,which:"b"}}]}getCubics(){const t=[],e=(t,e)=>{const r=t.va,n=t.vb;if(this.segs.length>1){if(0==e){const o=i.vmn([n,r,this.segs[e+1].vb],([t,e,r])=>t-s*(r-e)/3);return{A:r,B:i.vmn([t.m,n,r,o],([t,e,r,n])=>(8*t-e-r-3*n)/3),C:o,D:n}}if(e==this.segs.length-1){const o=i.vmn([n,r,this.segs[e-1].va],([t,e,r])=>e+s*(t-r)/3);return{A:r,B:o,C:i.vmn([t.m,n,r,o],([t,e,r,n])=>(8*t-e-r-3*n)/3),D:n}}{const t=i.vmn([n,r,this.segs[e+1].vb],([t,e,r])=>t-a*(r-e)/3);return{A:r,B:i.vmn([n,r,this.segs[e-1].va],([t,e,r])=>e+a*(t-r)/3),C:t,D:n}}}return{A:r,B:t.m,C:t.m,D:n}};return this.segs.forEach((r,n)=>t.push(e(r,n))),t}getBreakPoint(){return this.segs[0].m}getSegments(){return this.segs}getVelocity(t){const e=this.getCubics();return"a"==t?i.vnorm(i.vm2(e[0].A,e[0].B,(t,e)=>3*(e-t))):i.vnorm(i.vm2(e[e.length-1].C,e[e.length-1].D,(t,e)=>3*(t-e)))}}e.OneEdge=class extends l{constructor(t,e){super(e.a,e.b,t[e.a].p,t[e.b].p,e.m)}};e.MultiEdge=class extends h{constructor(t,e){super({a:t.a,b:e.b,segs:t.getSegments().concat(e.getSegments())})}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Loader=class{constructor(){this.k=(()=>{}),this.count=0,this.tasks=[],this.data={img:{},json:{}}}add(t){this.tasks.push(t),this.count--}done(t){this.k=t,this.tasks.forEach(t=>t())}image(t,e){this.add(()=>{var r=new Image;r.src=t,r.onload=(()=>{this.data.img[e]=r,this.succ()})})}succ(){0==++this.count&&this.k(this.data)}json_file(t,e){null==e&&(e=t+".json"),this.add(()=>{const r=new Request(e);fetch(r).then(t=>t.json()).then(e=>{this.data.json[t]=e,this.succ()}).catch(console.error)})}}},function(t,e,r){"use strict";function n(t){return String.fromCharCode(t+97)}Object.defineProperty(e,"__esModule",{value:!0}),e.nameFromNum=n,e.stringifyLam=function(t,e="λ"){return function t(e,r,i){switch(e.t){case"lam":{const o=("lam"==r?"":i)+n(e.name)+t(e.b,"lam",i);return"lam"==r||"top"==r?o:"("+o+")"}case"app":{const n=("lam"==r?".":"")+t(e.f,"appl",i)+" "+t(e.arg,"appr",i);return"appr"==r?"("+n+")":n}case"var":return n(e.name);case"error":return"ERROR"}}(t,"top",e)}},function(t,e,r){!function(){"use strict";var e,r,n,i,o;function s(t,e){var r,n=Object.keys(e);for(r=0;r<n.length;r++)t=t.replace(new RegExp("\\{"+n[r]+"\\}","gi"),e[n[r]]);return t}function a(t){var e,r,n;if(!t)throw new Error("cannot create a random attribute name for an undefined object");e="ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",r="";do{for(r="",n=0;n<12;n++)r+=e[Math.floor(Math.random()*e.length)]}while(t[r]);return r}function c(t){var e={alphabetic:"alphabetic",hanging:"hanging",top:"text-before-edge",bottom:"text-after-edge",middle:"central"};return e[t]||e.alphabetic}o=function(t,e){var r,n,i,o={};for(t=t.split(","),e=e||10,r=0;r<t.length;r+=2)n="&"+t[r+1]+";",i=parseInt(t[r],e),o[n]="&#"+i+";";return o["\\xa0"]="&#160;",o}("50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,t9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro",32),e={strokeStyle:{svgAttr:"stroke",canvas:"#000000",svg:"none",apply:"stroke"},fillStyle:{svgAttr:"fill",canvas:"#000000",svg:null,apply:"fill"},lineCap:{svgAttr:"stroke-linecap",canvas:"butt",svg:"butt",apply:"stroke"},lineJoin:{svgAttr:"stroke-linejoin",canvas:"miter",svg:"miter",apply:"stroke"},miterLimit:{svgAttr:"stroke-miterlimit",canvas:10,svg:4,apply:"stroke"},lineWidth:{svgAttr:"stroke-width",canvas:1,svg:1,apply:"stroke"},globalAlpha:{svgAttr:"opacity",canvas:1,svg:1,apply:"fill stroke"},font:{canvas:"10px sans-serif"},shadowColor:{canvas:"#000000"},shadowOffsetX:{canvas:0},shadowOffsetY:{canvas:0},shadowBlur:{canvas:0},textAlign:{canvas:"start"},textBaseline:{canvas:"alphabetic"}},(n=function(t,e){this.__root=t,this.__ctx=e}).prototype.addColorStop=function(t,e){var r,n=this.__ctx.__createElement("stop");n.setAttribute("offset",t),-1!==e.indexOf("rgba")?(r=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(e),n.setAttribute("stop-color",s("rgb({r},{g},{b})",{r:r[1],g:r[2],b:r[3]})),n.setAttribute("stop-opacity",r[4])):n.setAttribute("stop-color",e),this.__root.appendChild(n)},i=function(t,e){this.__root=t,this.__ctx=e},(r=function(t){var e,n={width:500,height:500,enableMirroring:!1};if(arguments.length>1?((e=n).width=arguments[0],e.height=arguments[1]):e=t||n,!(this instanceof r))return new r(e);this.width=e.width||n.width,this.height=e.height||n.height,this.enableMirroring=void 0!==e.enableMirroring?e.enableMirroring:n.enableMirroring,this.canvas=this,this.__document=e.document||document,this.__canvas=this.__document.createElement("canvas"),this.__ctx=this.__canvas.getContext("2d"),this.__setDefaultStyles(),this.__stack=[this.__getStyleState()],this.__groupStack=[],this.__root=this.__document.createElementNS("http://www.w3.org/2000/svg","svg"),this.__root.setAttribute("version",1.1),this.__root.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.__root.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),this.__root.setAttribute("width",this.width),this.__root.setAttribute("height",this.height),this.__ids={},this.__defs=this.__document.createElementNS("http://www.w3.org/2000/svg","defs"),this.__root.appendChild(this.__defs),this.__currentElement=this.__document.createElementNS("http://www.w3.org/2000/svg","g"),this.__root.appendChild(this.__currentElement)}).prototype.__createElement=function(t,e,r){void 0===e&&(e={});var n,i,o=this.__document.createElementNS("http://www.w3.org/2000/svg",t),s=Object.keys(e);for(r&&(o.setAttribute("fill","none"),o.setAttribute("stroke","none")),n=0;n<s.length;n++)i=s[n],o.setAttribute(i,e[i]);return o},r.prototype.__setDefaultStyles=function(){var t,r,n=Object.keys(e);for(t=0;t<n.length;t++)this[r=n[t]]=e[r].canvas},r.prototype.__applyStyleState=function(t){var e,r,n=Object.keys(t);for(e=0;e<n.length;e++)this[r=n[e]]=t[r]},r.prototype.__getStyleState=function(){var t,r,n={},i=Object.keys(e);for(t=0;t<i.length;t++)n[r=i[t]]=this[r];return n},r.prototype.__applyStyleToCurrentElement=function(t){var r,o,a,c,l,h=Object.keys(e);for(r=0;r<h.length;r++)if(o=e[h[r]],a=this[h[r]],o.apply)if(-1!==o.apply.indexOf("fill")&&a instanceof i){if(a.__ctx)for(;a.__ctx.__defs.childNodes.length;)c=a.__ctx.__defs.childNodes[0].getAttribute("id"),this.__ids[c]=c,this.__defs.appendChild(a.__ctx.__defs.childNodes[0]);this.__currentElement.setAttribute("fill",s("url(#{id})",{id:a.__root.getAttribute("id")}))}else-1!==o.apply.indexOf("fill")&&a instanceof n?this.__currentElement.setAttribute("fill",s("url(#{id})",{id:a.__root.getAttribute("id")})):-1!==o.apply.indexOf(t)&&o.svg!==a&&("stroke"!==o.svgAttr&&"fill"!==o.svgAttr||-1===a.indexOf("rgba")?this.__currentElement.setAttribute(o.svgAttr,a):(l=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(a),this.__currentElement.setAttribute(o.svgAttr,s("rgb({r},{g},{b})",{r:l[1],g:l[2],b:l[3]})),this.__currentElement.setAttribute(o.svgAttr+"-opacity",l[4])))},r.prototype.__closestGroupOrSvg=function(t){return"g"===(t=t||this.__currentElement).nodeName||"svg"===t.nodeName?t:this.__closestGroupOrSvg(t.parentNode)},r.prototype.getSerializedSvg=function(t){var e,r,n,i,s,a=(new XMLSerializer).serializeToString(this.__root);if(/xmlns="http:\/\/www\.w3\.org\/2000\/svg".+xmlns="http:\/\/www\.w3\.org\/2000\/svg/gi.test(a)&&(a=a.replace('xmlns="http://www.w3.org/2000/svg','xmlns:xlink="http://www.w3.org/1999/xlink')),t)for(e=Object.keys(o),r=0;r<e.length;r++)n=e[r],i=o[n],(s=new RegExp(n,"gi")).test(a)&&(a=a.replace(s,i));return a},r.prototype.getSvg=function(){return this.__root},r.prototype.save=function(){var t=this.__createElement("g"),e=this.__closestGroupOrSvg();this.__groupStack.push(e),e.appendChild(t),this.__currentElement=t,this.__stack.push(this.__getStyleState())},r.prototype.restore=function(){this.__currentElement=this.__groupStack.pop();var t=this.__stack.pop();this.__applyStyleState(t)},r.prototype.__addTransform=function(t){var e=this.__closestGroupOrSvg();if(e.childNodes.length>0){var r=this.__createElement("g");e.appendChild(r),this.__currentElement=r}var n=this.__currentElement.getAttribute("transform");n?n+=" ":n="",n+=t,this.__currentElement.setAttribute("transform",n)},r.prototype.scale=function(t,e){void 0===e&&(e=t),this.__addTransform(s("scale({x},{y})",{x:t,y:e}))},r.prototype.rotate=function(t){var e=180*t/Math.PI;this.__addTransform(s("rotate({angle},{cx},{cy})",{angle:e,cx:0,cy:0}))},r.prototype.translate=function(t,e){this.__addTransform(s("translate({x},{y})",{x:t,y:e}))},r.prototype.transform=function(t,e,r,n,i,o){this.__addTransform(s("matrix({a},{b},{c},{d},{e},{f})",{a:t,b:e,c:r,d:n,e:i,f:o}))},r.prototype.beginPath=function(){var t;this.__currentDefaultPath="",this.__currentPosition={},t=this.__createElement("path",{},!0),this.__closestGroupOrSvg().appendChild(t),this.__currentElement=t},r.prototype.__applyCurrentDefaultPath=function(){if("path"!==this.__currentElement.nodeName)throw new Error("Attempted to apply path command to node "+this.__currentElement.nodeName);var t=this.__currentDefaultPath;this.__currentElement.setAttribute("d",t)},r.prototype.__addPathCommand=function(t){this.__currentDefaultPath+=" ",this.__currentDefaultPath+=t},r.prototype.moveTo=function(t,e){"path"!==this.__currentElement.nodeName&&this.beginPath(),this.__currentPosition={x:t,y:e},this.__addPathCommand(s("M {x} {y}",{x:t,y:e}))},r.prototype.closePath=function(){this.__addPathCommand("Z")},r.prototype.lineTo=function(t,e){this.__currentPosition={x:t,y:e},this.__currentDefaultPath.indexOf("M")>-1?this.__addPathCommand(s("L {x} {y}",{x:t,y:e})):this.__addPathCommand(s("M {x} {y}",{x:t,y:e}))},r.prototype.bezierCurveTo=function(t,e,r,n,i,o){this.__currentPosition={x:i,y:o},this.__addPathCommand(s("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}",{cp1x:t,cp1y:e,cp2x:r,cp2y:n,x:i,y:o}))},r.prototype.quadraticCurveTo=function(t,e,r,n){this.__currentPosition={x:r,y:n},this.__addPathCommand(s("Q {cpx} {cpy} {x} {y}",{cpx:t,cpy:e,x:r,y:n}))};var l=function(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]);return[t[0]/e,t[1]/e]};r.prototype.arcTo=function(t,e,r,n,i){var o=this.__currentPosition&&this.__currentPosition.x,s=this.__currentPosition&&this.__currentPosition.y;if(void 0!==o&&void 0!==s){if(i<0)throw new Error("IndexSizeError: The radius provided ("+i+") is negative.");if(o===t&&s===e||t===r&&e===n||0===i)this.lineTo(t,e);else{var a=l([o-t,s-e]),c=l([r-t,n-e]);if(a[0]*c[1]!=a[1]*c[0]){var h=a[0]*c[0]+a[1]*c[1],d=Math.acos(Math.abs(h)),u=l([a[0]+c[0],a[1]+c[1]]),p=i/Math.sin(d/2),g=t+p*u[0],m=e+p*u[1],f=[-a[1],a[0]],_=[c[1],-c[0]],v=function(t){var e=t[0];return t[1]>=0?Math.acos(e):-Math.acos(e)},y=v(f),b=v(_);this.lineTo(g+f[0]*i,m+f[1]*i),this.arc(g,m,i,y,b)}else this.lineTo(t,e)}}},r.prototype.stroke=function(){"path"===this.__currentElement.nodeName&&this.__currentElement.setAttribute("paint-order","fill stroke markers"),this.__applyCurrentDefaultPath(),this.__applyStyleToCurrentElement("stroke")},r.prototype.fill=function(){"path"===this.__currentElement.nodeName&&this.__currentElement.setAttribute("paint-order","stroke fill markers"),this.__applyCurrentDefaultPath(),this.__applyStyleToCurrentElement("fill")},r.prototype.rect=function(t,e,r,n){"path"!==this.__currentElement.nodeName&&this.beginPath(),this.moveTo(t,e),this.lineTo(t+r,e),this.lineTo(t+r,e+n),this.lineTo(t,e+n),this.lineTo(t,e),this.closePath()},r.prototype.fillRect=function(t,e,r,n){var i;i=this.__createElement("rect",{x:t,y:e,width:r,height:n},!0),this.__closestGroupOrSvg().appendChild(i),this.__currentElement=i,this.__applyStyleToCurrentElement("fill")},r.prototype.strokeRect=function(t,e,r,n){var i;i=this.__createElement("rect",{x:t,y:e,width:r,height:n},!0),this.__closestGroupOrSvg().appendChild(i),this.__currentElement=i,this.__applyStyleToCurrentElement("stroke")},r.prototype.clearRect=function(t,e,r,n){var i,o=this.__closestGroupOrSvg();i=this.__createElement("rect",{x:t,y:e,width:r,height:n,fill:"#FFFFFF"},!0),o.appendChild(i)},r.prototype.createLinearGradient=function(t,e,r,i){var o=this.__createElement("linearGradient",{id:a(this.__ids),x1:t+"px",x2:r+"px",y1:e+"px",y2:i+"px",gradientUnits:"userSpaceOnUse"},!1);return this.__defs.appendChild(o),new n(o,this)},r.prototype.createRadialGradient=function(t,e,r,i,o,s){var c=this.__createElement("radialGradient",{id:a(this.__ids),cx:i+"px",cy:o+"px",r:s+"px",fx:t+"px",fy:e+"px",gradientUnits:"userSpaceOnUse"},!1);return this.__defs.appendChild(c),new n(c,this)},r.prototype.__parseFont=function(){var t=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\"\sa-z]+?)\s*$/i.exec(this.font),e={style:t[1]||"normal",size:t[4]||"10px",family:t[6]||"sans-serif",weight:t[3]||"normal",decoration:t[2]||"normal",href:null};return"underline"===this.__fontUnderline&&(e.decoration="underline"),this.__fontHref&&(e.href=this.__fontHref),e},r.prototype.__wrapTextLink=function(t,e){if(t.href){var r=this.__createElement("a");return r.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",t.href),r.appendChild(e),r}return e},r.prototype.__applyText=function(t,e,r,n){var i,o,s=this.__parseFont(),a=this.__closestGroupOrSvg(),l=this.__createElement("text",{"font-family":s.family,"font-size":s.size,"font-style":s.style,"font-weight":s.weight,"text-decoration":s.decoration,x:e,y:r,"text-anchor":(i=this.textAlign,o={left:"start",right:"end",center:"middle",start:"start",end:"end"},o[i]||o.start),"dominant-baseline":c(this.textBaseline)},!0);l.appendChild(this.__document.createTextNode(t)),this.__currentElement=l,this.__applyStyleToCurrentElement(n),a.appendChild(this.__wrapTextLink(s,l))},r.prototype.fillText=function(t,e,r){this.__applyText(t,e,r,"fill")},r.prototype.strokeText=function(t,e,r){this.__applyText(t,e,r,"stroke")},r.prototype.measureText=function(t){return this.__ctx.font=this.font,this.__ctx.measureText(t)},r.prototype.arc=function(t,e,r,n,i,o){if(n!==i){(n%=2*Math.PI)===(i%=2*Math.PI)&&(i=(i+2*Math.PI-.001*(o?-1:1))%(2*Math.PI));var a=t+r*Math.cos(i),c=e+r*Math.sin(i),l=t+r*Math.cos(n),h=e+r*Math.sin(n),d=o?0:1,u=0,p=i-n;p<0&&(p+=2*Math.PI),u=o?p>Math.PI?0:1:p>Math.PI?1:0,this.lineTo(l,h),this.__addPathCommand(s("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}",{rx:r,ry:r,xAxisRotation:0,largeArcFlag:u,sweepFlag:d,endX:a,endY:c})),this.__currentPosition={x:a,y:c}}},r.prototype.clip=function(){var t=this.__closestGroupOrSvg(),e=this.__createElement("clipPath"),r=a(this.__ids),n=this.__createElement("g");t.removeChild(this.__currentElement),e.setAttribute("id",r),e.appendChild(this.__currentElement),this.__defs.appendChild(e),t.setAttribute("clip-path",s("url(#{id})",{id:r})),t.appendChild(n),this.__currentElement=n},r.prototype.drawImage=function(){var t,e,n,i,o,s,a,c,l,h,d,u,p,g,m=Array.prototype.slice.call(arguments),f=m[0],_=0,v=0;if(3===m.length)t=m[1],e=m[2],n=o=f.width,i=s=f.height;else if(5===m.length)t=m[1],e=m[2],n=m[3],i=m[4],o=f.width,s=f.height;else{if(9!==m.length)throw new Error("Inavlid number of arguments passed to drawImage: "+arguments.length);_=m[1],v=m[2],o=m[3],s=m[4],t=m[5],e=m[6],n=m[7],i=m[8]}if(a=this.__closestGroupOrSvg(),d=this.__currentElement,f instanceof r){for(l=(c=f.getSvg()).childNodes[0];l.childNodes.length;)g=l.childNodes[0].getAttribute("id"),this.__ids[g]=g,this.__defs.appendChild(l.childNodes[0]);h=c.childNodes[1],a.appendChild(h),this.__currentElement=h,this.translate(t,e),this.__currentElement=d}else"CANVAS"!==f.nodeName&&"IMG"!==f.nodeName||((u=this.__createElement("image")).setAttribute("width",n),u.setAttribute("height",i),u.setAttribute("preserveAspectRatio","none"),(_||v||o!==f.width||s!==f.height)&&((p=this.__document.createElement("canvas")).width=n,p.height=i,p.getContext("2d").drawImage(f,_,v,o,s,0,0,n,i),f=p),u.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","CANVAS"===f.nodeName?f.toDataURL():f.getAttribute("src")),a.appendChild(u),this.__currentElement=u,this.translate(t,e),this.__currentElement=d)},r.prototype.createPattern=function(t,e){var n,o=this.__document.createElementNS("http://www.w3.org/2000/svg","pattern"),s=a(this.__ids);return o.setAttribute("id",s),o.setAttribute("width",t.width),o.setAttribute("height",t.height),"CANVAS"===t.nodeName||"IMG"===t.nodeName?((n=this.__document.createElementNS("http://www.w3.org/2000/svg","image")).setAttribute("width",t.width),n.setAttribute("height",t.height),n.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","CANVAS"===t.nodeName?t.toDataURL():t.getAttribute("src")),o.appendChild(n),this.__defs.appendChild(o)):t instanceof r&&(o.appendChild(t.__root.childNodes[1]),this.__defs.appendChild(o)),new i(o,this)},r.prototype.drawFocusRing=function(){},r.prototype.createImageData=function(){},r.prototype.getImageData=function(){},r.prototype.putImageData=function(){},r.prototype.globalCompositeOperation=function(){},r.prototype.setTransform=function(){},"object"==typeof window&&(window.C2S=r),"object"==typeof t.exports&&(t.exports=r)}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.phonyValue=0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,