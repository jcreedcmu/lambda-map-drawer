!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/js/",r(r.s=1)}([function(t,e,r){"use strict";function i(t){return t*t}function n(t){return Math.sqrt(i(t.x)+i(t.y))}function o(t,e){return{x:t.x+e.x,y:t.y+e.y}}function a(t,e){return{x:t.x/e,y:t.y/e}}Object.defineProperty(e,"__esModule",{value:!0}),e.sqr=i,e.vlen=n,e.vnorm=function(t){return a(t,n(t))},e.vsub=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},e.vplus=o,e.vdiv=a,e.vscale=function(t,e){return{x:t.x*e,y:t.y*e}},e.vavg=function(t,e){return a(o(t,e),2)},e.vint=function(t){return{x:Math.floor(t.x),y:Math.floor(t.y)}},e.vrot90=function(t){return{x:t.y,y:-t.x}}},function(t,e,r){"use strict";var i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const n=r(2),o=r(3),a=r(4),s=i(r(0)),c=r(5),l=16,h=7,d=9,u=4,p=5;function f(t,e){const r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}function g(t){const e=document.getElementById(t),r=e.getContext("2d");return e.width=500,e.height=500,r.fillStyle="white",r.fillRect(0,0,500,500),{c:e,d:r}}function m(t,e){e.d.putImageData(function(t){const e=new ImageData(t.w,t.h);for(let r=0;r<t.w;r++)for(let i=0;i<t.h;i++){const n=i*t.w+r,o=4*(i*t.w+r);e.data[o+0]=17*t.data[n]&255,e.data[o+1]=71*t.data[n]&255,e.data[o+2]=157*t.data[n]&255,e.data[o+3]=t.data[n]?128:0}return e}(t.array),0,0),Object.keys(t.avg).forEach(r=>{const i=t.avg[r];e.d.fillStyle="white",e.d.fillRect(Math.floor(i.x)-3,Math.floor(i.y)-3,6,6)})}function _(t,e){const{d:r}=e;t.edges.forEach(({a:e,b:i,m:n},o)=>{const a=t.vertices[e].p,s=t.vertices[i].p;r.beginPath(),r.moveTo(a.x,a.y),r.quadraticCurveTo(2*n.x-(a.x+s.x)/2,2*n.y-(a.y+s.y)/2,s.x,s.y),r.strokeStyle="black",r.lineWidth=1,r.stroke(),E("renderDebugId")&&(r.beginPath(),r.fillStyle="white",r.arc(n.x,n.y,h,0,2*Math.PI),r.fill(),r.textAlign="center",r.textBaseline="middle",r.font="bold 10px arial",r.fillStyle="#404",r.fillText(o+"",n.x,n.y))});for(let[e,{p:i}]of Object.entries(t.vertices))r.fillStyle="#fed",3!=t.vertices[e].edges.length&&(r.fillStyle="red"),e==t.rootData.root&&(r.fillStyle="white"),r.strokeStyle="black",r.lineWidth=1,r.beginPath(),r.arc(i.x,i.y,d,0,2*Math.PI),r.fill(),r.stroke(),E("renderDebugId")&&(r.textAlign="center",r.textBaseline="middle",r.font="bold 9px arial",r.fillStyle="#000",r.fillText(e,i.x,i.y));E("renderLambda")&&(r.save(),r.fillStyle="white",r.globalAlpha=.2,r.fillRect(0,0,500,500),r.restore())}function y(t,e,r){t.strokeStyle="black",t.lineWidth=1,t.stroke(),t.save(),t.translate(e.x,e.y),t.rotate(r),t.beginPath(),t.moveTo(0,-3),t.lineTo(2,0),t.lineTo(0,3),t.lineTo(8,0),t.fillStyle="black",t.fill(),t.restore()}function v(t,e,r,i){y(t,e,Math.atan2(i.y-r.y,i.x-r.x))}function x(t,e){const r=new Path2D;return r.arc(t.x,t.y,e,0,2*Math.PI),r}function b(t,e){const r=x(e,u);t.fillStyle="white",t.strokeStyle="gray",t.lineWidth=1,t.fill(r),t.stroke(r)}function w(t,e){const{d:r}=e;t.edges.forEach(e=>{if(null==e)return;const{a:i,b:n,m:o,tgt:a}=e;if(null==t.vertices[i])return;if(null==t.vertices[n])return;const s=t.vertices[i].p,c=t.vertices[n].p;r.beginPath(),r.moveTo(s.x,s.y),r.quadraticCurveTo(2*o.x-(s.x+c.x)/2,2*o.y-(s.y+c.y)/2,c.x,c.y),"b"==a?v(r,o,s,c):v(r,o,c,s)});const i=t.vertices[t.rootData.root].p,n=s.vplus(i,s.vscale(t.rootData.rootDir,20));r.beginPath(),r.moveTo(i.x,i.y),r.lineTo(n.x,n.y),r.strokeStyle="black",r.lineWidth=1,r.stroke(),y(r,n,Math.atan2(t.rootData.rootDir.y,t.rootData.rootDir.x));for(let[e,i]of Object.entries(t.vertices)){if(null==i)return;const{p:n,t:o}=i;r.fillStyle=e==t.rootData.root?"#aaf":"app"==o?"white":"black",r.strokeStyle="black",r.lineWidth=1,r.beginPath(),r.arc(n.x,n.y,d,0,2*Math.PI),r.fill(),r.stroke()}if(E("renderRootChoices"))for(const e of t.rootData.otherRoots)b(r,e.p);document.getElementById("lambda").innerText=function t(e,r,i,n){switch(i.t){case"lam":{const o=String.fromCharCode(e+97),a="lam"==n?"":"Î»",s=t(e+1,r.concat([o]),i.b,"lam"),c=a+o+s.s;return{s:"lam"==n||"top"==n?c:"("+c+")",counter:s.counter}}case"app":{const o="lam"==n?".":"",a=t(e,r.slice(0,i.split),i.f,"appl"),s=t(a.counter,r.slice(i.split),i.arg,"appr"),c=o+a.s+" "+s.s;return{s:"appr"==n?"("+c+")":c,counter:s.counter}}case"var":return{s:r[0],counter:e}}}(0,[],function t(e){switch(e.t){case"lam":{const{e:r,size:i}=t(e.b);return{e:{t:"lam",b:r},size:i-1}}case"app":{const{e:r,size:i}=t(e.f),{e:n,size:o}=t(e.arg);return{e:{t:"app",f:r,arg:n,split:i},size:i+o}}case"var":return{e:e,size:1}}}(t.exp).e,"top").s}function E(t){return document.getElementById(t).checked}const k=new class{compute(){this._compute(this.c1,this.c2)}_compute(t,e){this.conj=void 0,this.graph=void 0,this.rootedGraph=void 0,this.lambdaGraph=void 0,document.getElementById("lambda").innerText="",e.d.clearRect(0,0,e.c.width,e.c.height);const r=t.d.getImageData(0,0,t.c.width,t.c.height),i=this.conj=n.findConjoined(r);E("renderDebug")&&m(i,e);const a=this.graph=o.findGraph(i),c=this.rootedGraph=this.forceRoot?o.breakGraphAtEdge(a,this.forceRoot):o.findRootedGraph(a);if(E("renderCyclic")&&function(t,e){const{d:r}=e;for(const e of Object.values(t.vertices)){const i=["red","green","blue"];e.edges.length<=3&&e.edges.forEach((n,o)=>{const a=t.edges[n.i].m,c=s.vplus(s.vscale(s.vnorm(s.vsub(a,e.p)),15),e.p);r.beginPath(),r.moveTo(e.p.x,e.p.y),r.lineTo(c.x,c.y),r.strokeStyle=i[o],r.lineWidth=3,r.lineCap="round",r.stroke()})}}(c,e),E("renderGraph")&&_(c,e),E("renderLambda"))try{w(this.lambdaGraph=o.findLambdaGraph(c),e)}catch(t){document.getElementById("lambda").innerHTML='<font color="red">All nodes must have exactly three edges to compute lambda graph.</font>',console.log(t),_(c,e)}}constructor(){this.c1=g("c1"),this.c2=g("c2")}getExamples(){return document.getElementById("examples")}invalidateSelectBox(){this.getExamples().selectedIndex=-1}paint(t){const{c1:e}=this;this.getExamples(),this.invalidateSelectBox(),this.forceRoot=void 0,t=s.vint(t);const r=Array.from(document.getElementsByName("paint")).find(t=>t.checked).value,i=function(t){switch(t){case"node":return l;case"edge":return l/2;case"erase":return 2*l}}(r);e.d.fillStyle=function(t){switch(t){case"node":return"red";case"edge":return"blue";case"erase":return"white"}}(r),e.d.fillRect(t.x-i/2,t.y-i/2,i,i)}paintLine(t,e){if(Math.max(Math.abs(t.x-e.x),Math.abs(t.y-e.y))<l/2)this.paint(e);else{const r={x:Math.floor((t.x+e.x)/2),y:Math.floor((t.y+e.y)/2)};this.paintLine(t,r),this.paintLine(r,e)}}go(){const{c1:t,c2:e}=this;t.d.drawImage(A.data.img.example1,0,0),["renderDebug","renderDebugId","renderCyclic","renderGraph","renderLambda","renderRootChoices"].forEach(t=>{document.getElementById(t).addEventListener("change",()=>this.compute())});let r=void 0;const i=e=>{const i=f(e,t.c);null!=r?this.paintLine(r,i):this.paint(i),r=i},n=t=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",i),this.compute()};function a(){t.d.fillStyle="white",t.d.fillRect(0,0,t.c.width,t.c.height)}document.getElementById("clear").addEventListener("click",()=>{a(),this.compute()}),document.getElementById("exportSvg").addEventListener("click",()=>{const t=new c(e.c.width,e.c.height);this._compute(this.c1,{c:e.c,d:t});const r=new Blob([t.getSerializedSvg()],{type:"image/svg"}),i=document.createElement("a");i.href=window.URL.createObjectURL(r),i.download="lambda-map.svg",i.click()});const s=document.getElementById("examples");s.addEventListener("change",()=>{this.forceRoot=void 0,t.d.drawImage(A.data.img[s.value],0,0),this.compute()}),t.c.addEventListener("mousedown",e=>{if(1!=e.buttons)return;const o=f(e,t.c);r=o,this.paint(o),document.addEventListener("mousemove",i),document.addEventListener("mouseup",n),e.stopPropagation(),e.preventDefault()}),e.c.addEventListener("mousedown",t=>{if(null!=this.lambdaGraph&&E("renderRootChoices")){const r=f(t,e.c),i=this.lambdaGraph.vertices[this.lambdaGraph.rootData.root].p;if(e.d.isPointInPath(x(i,d+p),r.x,r.y)){const t=this.lambdaGraph.rootData.brokenEdge;this.forceRoot={i:t.i,which:o.opposite(t.which)},this.compute()}else this.lambdaGraph.rootData.otherRoots.forEach(t=>{e.d.isPointInPath(x(t.p,u+p),r.x,r.y)&&(this.forceRoot=t.es,this.compute())})}t.stopPropagation(),t.preventDefault()}),document.addEventListener("paste",e=>{Array.from(e.clipboardData.items).forEach(e=>{if("file"===e.kind){const r=e.getAsFile(),i=new FileReader;i.onload=(e=>{const r=new Image;"string"==typeof i.result&&(r.src=i.result,r.addEventListener("load",()=>{a(),t.d.drawImage(r,Math.floor((t.c.width-r.width)/2),Math.floor((t.c.height-r.height)/2)),function(t){const e=t.d.getImageData(0,0,t.c.width,t.c.height);for(let r=0;r<t.c.width;r++)for(let i=0;i<t.c.height;i++){const n=4*(t.c.width*i+r),[o,a,s]=[e.data[n],e.data[n+1],e.data[n+2]];let c=255,l=255,h=255;(o>a||s>a)&&(o>s?(l=0,h=0):(c=0,l=0)),e.data[n]=c,e.data[n+1]=l,e.data[n+2]=h,e.data[n+3]=255}t.d.putImageData(e,0,0)}(t),this.invalidateSelectBox(),this.compute()}))}),i.readAsDataURL(r)}})}),this.compute()}};window.app=k;const A=new a.Loader;A.image("./img/example1.png","example1"),A.image("./img/example2.png","example2"),A.image("./img/example3.png","example3"),A.image("./img/cube.png","cube"),A.image("./img/dodecahedron.png","dodecahedron"),A.image("./img/prism.png","prism"),A.image("./img/tetrahedron.png","tetrahedron"),A.image("./img/tutte.png","tutte"),A.done(()=>k.go())},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i={r:255,g:255,b:255},n={r:255,g:0,b:0},o={r:0,g:0,b:255};function a(t,e,r){const i=4*(r*t.width+e);return{r:t.data[i],g:t.data[i+1],b:t.data[i+2]}}function s(t,e,r){const i=r*t.w+e;return t.data[i]}function c(t,e,r,i){const n=r*t.w+e;t.data[n]=i}function l(t,e){return t.r==e.r&&t.g==e.g&&t.b==e.b}e.findConjoined=function(t){let e=1;const r={},h={},d={};function u(t,e){h[e]||(h[e]={x:0,y:0},d[e]=0),h[e].x+=t.x,h[e].y+=t.y,d[e]++}function p(i,h,d){const p=e++;var f;r[p]=l(f=d,n)?"node":l(f,o)?"edge":"unknown";const m=[{x:i,y:h}];let _;for(;_=m.pop();){const{x:e,y:r}=_;s(g,e,r)||l(d,a(t,e,r))&&(c(g,e,r,p),u({x:e,y:r},p),m.push({x:e+1,y:r}),m.push({x:e-1,y:r}),m.push({x:e,y:r+1}),m.push({x:e,y:r-1}))}}const f=new Uint16Array(t.width*t.height),g={w:t.width,h:t.height,data:f};for(let e=0;e<g.w;e++)for(let r=0;r<g.h;r++){g.w;const n=a(t,e,r);l(n,i)||s(g,e,r)||p(e,r,n)}for(let t=1;t<e;t++)h[t].x/=d[t],h[t].y/=d[t];const m={};function _(t,e){t!=e&&(m[t]||(m[t]={}),m[t][e]=!0,m[e]||(m[e]={}),m[e][t]=!0)}for(let t=0;t<g.w-1;t++)for(let e=0;e<g.h-1;e++){const r=s(g,t,e);if(r){m[r]||(m[r]={});const i=s(g,t+1,e);i&&_(r,i);const n=s(g,t,e+1);n&&_(r,n)}}return{array:g,marks:r,avg:h,adjacent:m,numMarks:e-1}}},function(t,e,r){"use strict";var i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const n=i(r(0)),o=12;function a(t){return"a"==t?"b":"a"}function s(t,e){const r=e.which,i=a(r),s=e.i,c=t.edges[e.i],l=c[r],h=t.vertices[l],d=c.m,u=c[i],p=t.vertices[u],f=t.edges.length;t.edges[s][i]=u,t.edges[s][r]="*",t.edges[s].m=n.vavg(p.p,d);const g={a:"",b:"",m:n.vavg(d,h.p)};g[i]="*",g[r]=l;const m=t.edges.concat([g]),_=[{i:s,which:r},{i:f,which:i}],y={};for(let[e,r]of Object.entries(t.vertices))y[e]=r;y[l]={p:y[l].p,edges:y[l].edges.map(t=>t.i==s?{i:f,which:t.which}:t)},y["*"]={p:d,edges:_};const v=[];t.edges.forEach((r,i)=>{if(i==e.i)return;const a=t.vertices[r.a].p,s=t.vertices[r.b].p,c=n.vrot90(n.vscale(n.vnorm(n.vsub(a,s)),o));v.push({p:n.vplus(r.m,c),es:{i:i,which:"a"}}),v.push({p:n.vsub(r.m,c),es:{i:i,which:"b"}})});const x=n.vrot90(n.vnorm(n.vsub(h.p,p.p)));return{edges:m,vertices:y,rootData:{root:"*",otherRoots:v,rootDir:x,brokenEdge:e}}}function c(t,e){return t.edges[e.i][a(e.which)]}e.findGraph=function(t){const e={},r=[];for(let i=1;i<t.numMarks+1;i++)if("node"==t.marks[i])e[i]={p:t.avg[i],edges:[]};else if("edge"==t.marks[i]){const e=Object.keys(t.adjacent[i]);2==e.length&&r.push({a:e[0],b:e[1],m:t.avg[i]})}r.forEach((t,r)=>{e[t.a].edges.push({i:r,which:"a"}),e[t.b].edges.push({i:r,which:"b"})});for(let t of Object.values(e))t.edges.sort((e,i)=>{const n=r[e.i].m,o=r[i.i].m;return Math.atan2(n.x-t.p.x,n.y-t.p.y)-Math.atan2(o.x-t.p.x,o.y-t.p.y)});return{vertices:e,edges:r}},e.opposite=a,e.breakGraphAtEdge=s,e.findRootedGraph=function(t){const e=Object.keys(t.vertices);e.sort((e,r)=>t.vertices[e].p.y-t.vertices[r].p.y);const r=e[0],i=t.vertices[r].edges[0];return s(t,i)},e.findLambdaGraph=function(t){function e(e){s[e.i]=Object.assign({},t.edges[e.i],{tgt:e.which})}function r(a,l){if(n--<=0)return{t:"var"};if(null!=o[a])return{t:"var"};const h=t.vertices[a].edges,d=h.findIndex(t=>t.i==l.i),u=h[(d+1)%3],p=h[(d+2)%3];return e(p),function(e,r){const i={},n=[e];let o;for(;o=n.pop();){if(o==r)return!0;i[o]||(i[o]=!0,t.vertices[o].edges.forEach(e=>{null==s[e.i]&&n.push(c(t,e))}))}return!1}(a,c(t,p))?i(a,u,p):function(i,n,a){const s=t.vertices[i];o[i]=Object.assign({},s,{t:"app"}),e(n);const l=r(c(t,n),n);return{t:"app",f:r(c(t,a),a),arg:l}}(a,u,p)}function i(e,i,n){const l=t.vertices[e];var h;return o[e]=Object.assign({},l,{t:"lam"}),s[(h=i).i]=Object.assign({},t.edges[h.i],{tgt:a(h.which)}),{t:"lam",b:r(c(t,n),n)}}let n=100;const o={},s=[];let l=t.rootData.root,h=t.vertices[l];const d=h.edges[0],u=h.edges[1];e(u);const p=i(l,d,u);return{vertices:o,edges:s,rootData:t.rootData,exp:p}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Loader=class{constructor(){this.k=(()=>{}),this.count=0,this.tasks=[],this.data={img:{},json:{}}}add(t){this.tasks.push(t),this.count--}done(t){this.k=t,this.tasks.forEach(t=>t())}image(t,e){this.add(()=>{var r=new Image;r.src=t,r.onload=(()=>{this.data.img[e]=r,this.succ()})})}succ(){0==++this.count&&this.k(this.data)}json_file(t,e){null==e&&(e=t+".json"),this.add(()=>{const r=new Request(e);fetch(r).then(t=>t.json()).then(e=>{this.data.json[t]=e,this.succ()}).catch(console.error)})}}},function(t,e,r){!function(){"use strict";var e,r,i,n,o;function a(t,e){var r,i=Object.keys(e);for(r=0;r<i.length;r++)t=t.replace(new RegExp("\\{"+i[r]+"\\}","gi"),e[i[r]]);return t}function s(t){var e,r,i;if(!t)throw new Error("cannot create a random attribute name for an undefined object");e="ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",r="";do{for(r="",i=0;i<12;i++)r+=e[Math.floor(Math.random()*e.length)]}while(t[r]);return r}function c(t){var e={alphabetic:"alphabetic",hanging:"hanging",top:"text-before-edge",bottom:"text-after-edge",middle:"central"};return e[t]||e.alphabetic}o=function(t,e){var r,i,n,o={};for(t=t.split(","),e=e||10,r=0;r<t.length;r+=2)i="&"+t[r+1]+";",n=parseInt(t[r],e),o[i]="&#"+n+";";return o["\\xa0"]="&#160;",o}("50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,t9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro",32),e={strokeStyle:{svgAttr:"stroke",canvas:"#000000",svg:"none",apply:"stroke"},fillStyle:{svgAttr:"fill",canvas:"#000000",svg:null,apply:"fill"},lineCap:{svgAttr:"stroke-linecap",canvas:"butt",svg:"butt",apply:"stroke"},lineJoin:{svgAttr:"stroke-linejoin",canvas:"miter",svg:"miter",apply:"stroke"},miterLimit:{svgAttr:"stroke-miterlimit",canvas:10,svg:4,apply:"stroke"},lineWidth:{svgAttr:"stroke-width",canvas:1,svg:1,apply:"stroke"},globalAlpha:{svgAttr:"opacity",canvas:1,svg:1,apply:"fill stroke"},font:{canvas:"10px sans-serif"},shadowColor:{canvas:"#000000"},shadowOffsetX:{canvas:0},shadowOffsetY:{canvas:0},shadowBlur:{canvas:0},textAlign:{canvas:"start"},textBaseline:{canvas:"alphabetic"}},(i=function(t,e){this.__root=t,this.__ctx=e}).prototype.addColorStop=function(t,e){var r,i=this.__ctx.__createElement("stop");i.setAttribute("offset",t),-1!==e.indexOf("rgba")?(r=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(e),i.setAttribute("stop-color",a("rgb({r},{g},{b})",{r:r[1],g:r[2],b:r[3]})),i.setAttribute("stop-opacity",r[4])):i.setAttribute("stop-color",e),this.__root.appendChild(i)},n=function(t,e){this.__root=t,this.__ctx=e},(r=function(t){var e,i={width:500,height:500,enableMirroring:!1};if(arguments.length>1?((e=i).width=arguments[0],e.height=arguments[1]):e=t||i,!(this instanceof r))return new r(e);this.width=e.width||i.width,this.height=e.height||i.height,this.enableMirroring=void 0!==e.enableMirroring?e.enableMirroring:i.enableMirroring,this.canvas=this,this.__document=e.document||document,this.__canvas=this.__document.createElement("canvas"),this.__ctx=this.__canvas.getContext("2d"),this.__setDefaultStyles(),this.__stack=[this.__getStyleState()],this.__groupStack=[],this.__root=this.__document.createElementNS("http://www.w3.org/2000/svg","svg"),this.__root.setAttribute("version",1.1),this.__root.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.__root.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),this.__root.setAttribute("width",this.width),this.__root.setAttribute("height",this.height),this.__ids={},this.__defs=this.__document.createElementNS("http://www.w3.org/2000/svg","defs"),this.__root.appendChild(this.__defs),this.__currentElement=this.__document.createElementNS("http://www.w3.org/2000/svg","g"),this.__root.appendChild(this.__currentElement)}).prototype.__createElement=function(t,e,r){void 0===e&&(e={});var i,n,o=this.__document.createElementNS("http://www.w3.org/2000/svg",t),a=Object.keys(e);for(r&&(o.setAttribute("fill","none"),o.setAttribute("stroke","none")),i=0;i<a.length;i++)n=a[i],o.setAttribute(n,e[n]);return o},r.prototype.__setDefaultStyles=function(){var t,r,i=Object.keys(e);for(t=0;t<i.length;t++)this[r=i[t]]=e[r].canvas},r.prototype.__applyStyleState=function(t){var e,r,i=Object.keys(t);for(e=0;e<i.length;e++)this[r=i[e]]=t[r]},r.prototype.__getStyleState=function(){var t,r,i={},n=Object.keys(e);for(t=0;t<n.length;t++)i[r=n[t]]=this[r];return i},r.prototype.__applyStyleToCurrentElement=function(t){var r,o,s,c,l,h=Object.keys(e);for(r=0;r<h.length;r++)if(o=e[h[r]],s=this[h[r]],o.apply)if(-1!==o.apply.indexOf("fill")&&s instanceof n){if(s.__ctx)for(;s.__ctx.__defs.childNodes.length;)c=s.__ctx.__defs.childNodes[0].getAttribute("id"),this.__ids[c]=c,this.__defs.appendChild(s.__ctx.__defs.childNodes[0]);this.__currentElement.setAttribute("fill",a("url(#{id})",{id:s.__root.getAttribute("id")}))}else-1!==o.apply.indexOf("fill")&&s instanceof i?this.__currentElement.setAttribute("fill",a("url(#{id})",{id:s.__root.getAttribute("id")})):-1!==o.apply.indexOf(t)&&o.svg!==s&&("stroke"!==o.svgAttr&&"fill"!==o.svgAttr||-1===s.indexOf("rgba")?this.__currentElement.setAttribute(o.svgAttr,s):(l=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(s),this.__currentElement.setAttribute(o.svgAttr,a("rgb({r},{g},{b})",{r:l[1],g:l[2],b:l[3]})),this.__currentElement.setAttribute(o.svgAttr+"-opacity",l[4])))},r.prototype.__closestGroupOrSvg=function(t){return"g"===(t=t||this.__currentElement).nodeName||"svg"===t.nodeName?t:this.__closestGroupOrSvg(t.parentNode)},r.prototype.getSerializedSvg=function(t){var e,r,i,n,a,s=(new XMLSerializer).serializeToString(this.__root);if(/xmlns="http:\/\/www\.w3\.org\/2000\/svg".+xmlns="http:\/\/www\.w3\.org\/2000\/svg/gi.test(s)&&(s=s.replace('xmlns="http://www.w3.org/2000/svg','xmlns:xlink="http://www.w3.org/1999/xlink')),t)for(e=Object.keys(o),r=0;r<e.length;r++)i=e[r],n=o[i],(a=new RegExp(i,"gi")).test(s)&&(s=s.replace(a,n));return s},r.prototype.getSvg=function(){return this.__root},r.prototype.save=function(){var t=this.__createElement("g"),e=this.__closestGroupOrSvg();this.__groupStack.push(e),e.appendChild(t),this.__currentElement=t,this.__stack.push(this.__getStyleState())},r.prototype.restore=function(){this.__currentElement=this.__groupStack.pop();var t=this.__stack.pop();this.__applyStyleState(t)},r.prototype.__addTransform=function(t){var e=this.__closestGroupOrSvg();if(e.childNodes.length>0){var r=this.__createElement("g");e.appendChild(r),this.__currentElement=r}var i=this.__currentElement.getAttribute("transform");i?i+=" ":i="",i+=t,this.__currentElement.setAttribute("transform",i)},r.prototype.scale=function(t,e){void 0===e&&(e=t),this.__addTransform(a("scale({x},{y})",{x:t,y:e}))},r.prototype.rotate=function(t){var e=180*t/Math.PI;this.__addTransform(a("rotate({angle},{cx},{cy})",{angle:e,cx:0,cy:0}))},r.prototype.translate=function(t,e){this.__addTransform(a("translate({x},{y})",{x:t,y:e}))},r.prototype.transform=function(t,e,r,i,n,o){this.__addTransform(a("matrix({a},{b},{c},{d},{e},{f})",{a:t,b:e,c:r,d:i,e:n,f:o}))},r.prototype.beginPath=function(){var t;this.__currentDefaultPath="",this.__currentPosition={},t=this.__createElement("path",{},!0),this.__closestGroupOrSvg().appendChild(t),this.__currentElement=t},r.prototype.__applyCurrentDefaultPath=function(){if("path"!==this.__currentElement.nodeName)throw new Error("Attempted to apply path command to node "+this.__currentElement.nodeName);var t=this.__currentDefaultPath;this.__currentElement.setAttribute("d",t)},r.prototype.__addPathCommand=function(t){this.__currentDefaultPath+=" ",this.__currentDefaultPath+=t},r.prototype.moveTo=function(t,e){"path"!==this.__currentElement.nodeName&&this.beginPath(),this.__currentPosition={x:t,y:e},this.__addPathCommand(a("M {x} {y}",{x:t,y:e}))},r.prototype.closePath=function(){this.__addPathCommand("Z")},r.prototype.lineTo=function(t,e){this.__currentPosition={x:t,y:e},this.__currentDefaultPath.indexOf("M")>-1?this.__addPathCommand(a("L {x} {y}",{x:t,y:e})):this.__addPathCommand(a("M {x} {y}",{x:t,y:e}))},r.prototype.bezierCurveTo=function(t,e,r,i,n,o){this.__currentPosition={x:n,y:o},this.__addPathCommand(a("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}",{cp1x:t,cp1y:e,cp2x:r,cp2y:i,x:n,y:o}))},r.prototype.quadraticCurveTo=function(t,e,r,i){this.__currentPosition={x:r,y:i},this.__addPathCommand(a("Q {cpx} {cpy} {x} {y}",{cpx:t,cpy:e,x:r,y:i}))};var l=function(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]);return[t[0]/e,t[1]/e]};r.prototype.arcTo=function(t,e,r,i,n){var o=this.__currentPosition&&this.__currentPosition.x,a=this.__currentPosition&&this.__currentPosition.y;if(void 0!==o&&void 0!==a){if(n<0)throw new Error("IndexSizeError: The radius provided ("+n+") is negative.");if(o===t&&a===e||t===r&&e===i||0===n)this.lineTo(t,e);else{var s=l([o-t,a-e]),c=l([r-t,i-e]);if(s[0]*c[1]!=s[1]*c[0]){var h=s[0]*c[0]+s[1]*c[1],d=Math.acos(Math.abs(h)),u=l([s[0]+c[0],s[1]+c[1]]),p=n/Math.sin(d/2),f=t+p*u[0],g=e+p*u[1],m=[-s[1],s[0]],_=[c[1],-c[0]],y=function(t){var e=t[0];return t[1]>=0?Math.acos(e):-Math.acos(e)},v=y(m),x=y(_);this.lineTo(f+m[0]*n,g+m[1]*n),this.arc(f,g,n,v,x)}else this.lineTo(t,e)}}},r.prototype.stroke=function(){"path"===this.__currentElement.nodeName&&this.__currentElement.setAttribute("paint-order","fill stroke markers"),this.__applyCurrentDefaultPath(),this.__applyStyleToCurrentElement("stroke")},r.prototype.fill=function(){"path"===this.__currentElement.nodeName&&this.__currentElement.setAttribute("paint-order","stroke fill markers"),this.__applyCurrentDefaultPath(),this.__applyStyleToCurrentElement("fill")},r.prototype.rect=function(t,e,r,i){"path"!==this.__currentElement.nodeName&&this.beginPath(),this.moveTo(t,e),this.lineTo(t+r,e),this.lineTo(t+r,e+i),this.lineTo(t,e+i),this.lineTo(t,e),this.closePath()},r.prototype.fillRect=function(t,e,r,i){var n;n=this.__createElement("rect",{x:t,y:e,width:r,height:i},!0),this.__closestGroupOrSvg().appendChild(n),this.__currentElement=n,this.__applyStyleToCurrentElement("fill")},r.prototype.strokeRect=function(t,e,r,i){var n;n=this.__createElement("rect",{x:t,y:e,width:r,height:i},!0),this.__closestGroupOrSvg().appendChild(n),this.__currentElement=n,this.__applyStyleToCurrentElement("stroke")},r.prototype.clearRect=function(t,e,r,i){var n,o=this.__closestGroupOrSvg();n=this.__createElement("rect",{x:t,y:e,width:r,height:i,fill:"#FFFFFF"},!0),o.appendChild(n)},r.prototype.createLinearGradient=function(t,e,r,n){var o=this.__createElement("linearGradient",{id:s(this.__ids),x1:t+"px",x2:r+"px",y1:e+"px",y2:n+"px",gradientUnits:"userSpaceOnUse"},!1);return this.__defs.appendChild(o),new i(o,this)},r.prototype.createRadialGradient=function(t,e,r,n,o,a){var c=this.__createElement("radialGradient",{id:s(this.__ids),cx:n+"px",cy:o+"px",r:a+"px",fx:t+"px",fy:e+"px",gradientUnits:"userSpaceOnUse"},!1);return this.__defs.appendChild(c),new i(c,this)},r.prototype.__parseFont=function(){var t=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\"\sa-z]+?)\s*$/i.exec(this.font),e={style:t[1]||"normal",size:t[4]||"10px",family:t[6]||"sans-serif",weight:t[3]||"normal",decoration:t[2]||"normal",href:null};return"underline"===this.__fontUnderline&&(e.decoration="underline"),this.__fontHref&&(e.href=this.__fontHref),e},r.prototype.__wrapTextLink=function(t,e){if(t.href){var r=this.__createElement("a");return r.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",t.href),r.appendChild(e),r}return e},r.prototype.__applyText=function(t,e,r,i){var n,o,a=this.__parseFont(),s=this.__closestGroupOrSvg(),l=this.__createElement("text",{"font-family":a.family,"font-size":a.size,"font-style":a.style,"font-weight":a.weight,"text-decoration":a.decoration,x:e,y:r,"text-anchor":(n=this.textAlign,o={left:"start",right:"end",center:"middle",start:"start",end:"end"},o[n]||o.start),"dominant-baseline":c(this.textBaseline)},!0);l.appendChild(this.__document.createTextNode(t)),this.__currentElement=l,this.__applyStyleToCurrentElement(i),s.appendChild(this.__wrapTextLink(a,l))},r.prototype.fillText=function(t,e,r){this.__applyText(t,e,r,"fill")},r.prototype.strokeText=function(t,e,r){this.__applyText(t,e,r,"stroke")},r.prototype.measureText=function(t){return this.__ctx.font=this.font,this.__ctx.measureText(t)},r.prototype.arc=function(t,e,r,i,n,o){if(i!==n){(i%=2*Math.PI)===(n%=2*Math.PI)&&(n=(n+2*Math.PI-.001*(o?-1:1))%(2*Math.PI));var s=t+r*Math.cos(n),c=e+r*Math.sin(n),l=t+r*Math.cos(i),h=e+r*Math.sin(i),d=o?0:1,u=0,p=n-i;p<0&&(p+=2*Math.PI),u=o?p>Math.PI?0:1:p>Math.PI?1:0,this.lineTo(l,h),this.__addPathCommand(a("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}",{rx:r,ry:r,xAxisRotation:0,largeArcFlag:u,sweepFlag:d,endX:s,endY:c})),this.__currentPosition={x:s,y:c}}},r.prototype.clip=function(){var t=this.__closestGroupOrSvg(),e=this.__createElement("clipPath"),r=s(this.__ids),i=this.__createElement("g");t.removeChild(this.__currentElement),e.setAttribute("id",r),e.appendChild(this.__currentElement),this.__defs.appendChild(e),t.setAttribute("clip-path",a("url(#{id})",{id:r})),t.appendChild(i),this.__currentElement=i},r.prototype.drawImage=function(){var t,e,i,n,o,a,s,c,l,h,d,u,p,f,g=Array.prototype.slice.call(arguments),m=g[0],_=0,y=0;if(3===g.length)t=g[1],e=g[2],i=o=m.width,n=a=m.height;else if(5===g.length)t=g[1],e=g[2],i=g[3],n=g[4],o=m.width,a=m.height;else{if(9!==g.length)throw new Error("Inavlid number of arguments passed to drawImage: "+arguments.length);_=g[1],y=g[2],o=g[3],a=g[4],t=g[5],e=g[6],i=g[7],n=g[8]}if(s=this.__closestGroupOrSvg(),d=this.__currentElement,m instanceof r){for(l=(c=m.getSvg()).childNodes[0];l.childNodes.length;)f=l.childNodes[0].getAttribute("id"),this.__ids[f]=f,this.__defs.appendChild(l.childNodes[0]);h=c.childNodes[1],s.appendChild(h),this.__currentElement=h,this.translate(t,e),this.__currentElement=d}else"CANVAS"!==m.nodeName&&"IMG"!==m.nodeName||((u=this.__createElement("image")).setAttribute("width",i),u.setAttribute("height",n),u.setAttribute("preserveAspectRatio","none"),(_||y||o!==m.width||a!==m.height)&&((p=this.__document.createElement("canvas")).width=i,p.height=n,p.getContext("2d").drawImage(m,_,y,o,a,0,0,i,n),m=p),u.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","CANVAS"===m.nodeName?m.toDataURL():m.getAttribute("src")),s.appendChild(u),this.__currentElement=u,this.translate(t,e),this.__currentElement=d)},r.prototype.createPattern=function(t,e){var i,o=this.__document.createElementNS("http://www.w3.org/2000/svg","pattern"),a=s(this.__ids);return o.setAttribute("id",a),o.setAttribute("width",t.width),o.setAttribute("height",t.height),"CANVAS"===t.nodeName||"IMG"===t.nodeName?((i=this.__document.createElementNS("http://www.w3.org/2000/svg","image")).setAttribute("width",t.width),i.setAttribute("height",t.height),i.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","CANVAS"===t.nodeName?t.toDataURL():t.getAttribute("src")),o.appendChild(i),this.__defs.appendChild(o)):t instanceof r&&(o.appendChild(t.__root.childNodes[1]),this.__defs.appendChild(o)),new n(o,this)},r.prototype.drawFocusRing=function(){},r.prototype.createImageData=function(){},r.prototype.getImageData=function(){},r.prototype.putImageData=function(){},r.prototype.globalCompositeOperation=function(){},r.prototype.setTransform=function(){},"object"==typeof window&&(window.C2S=r),"object"==typeof t.exports&&(t.exports=r)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,