!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/js/",n(n.s=1)}([function(e,t,n){"use strict";function r(e){return e*e}function o(e){return Math.sqrt(r(e.x)+r(e.y))}function i(e,t){return{x:e.x+t.x,y:e.y+t.y}}function a(e,t){return{x:e.x/t,y:e.y/t}}Object.defineProperty(t,"__esModule",{value:!0}),t.sqr=r,t.vlen=o,t.vnorm=function(e){return a(e,o(e))},t.vsub=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},t.vplus=i,t.vdiv=a,t.vscale=function(e,t){return{x:e.x*t,y:e.y*t}},t.vavg=function(e,t){return a(i(e,t),2)},t.vint=function(e){return{x:Math.floor(e.x),y:Math.floor(e.y)}}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2),i=n(3),a=n(4),c=r(n(0)),s=16,l=7,d=9;function u(e,t){const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}function f(e){const t=document.getElementById(e),n=t.getContext("2d");return t.width=500,t.height=500,n.fillStyle="white",n.fillRect(0,0,500,500),{c:t,d:n}}function h(e,t){t.d.putImageData(function(e){const t=new ImageData(e.w,e.h);for(let n=0;n<e.w;n++)for(let r=0;r<e.h;r++){const o=r*e.w+n,i=4*(r*e.w+n);t.data[i+0]=17*e.data[o]&255,t.data[i+1]=71*e.data[o]&255,t.data[i+2]=157*e.data[o]&255,t.data[i+3]=e.data[o]?128:0}return t}(e.array),0,0),Object.keys(e.avg).forEach(n=>{const r=e.avg[n];t.d.fillStyle="white",t.d.fillRect(Math.floor(r.x)-3,Math.floor(r.y)-3,6,6)})}function g(e,t){const{d:n}=t;e.edges.forEach(({a:t,b:r,m:o},i)=>{const a=e.vertices[t].p,c=e.vertices[r].p;n.beginPath(),n.moveTo(a.x,a.y),n.quadraticCurveTo(2*o.x-(a.x+c.x)/2,2*o.y-(a.y+c.y)/2,c.x,c.y),n.strokeStyle="black",n.lineWidth=1,n.stroke(),y("renderDebugId")&&(n.beginPath(),n.fillStyle="white",n.arc(o.x,o.y,l,0,2*Math.PI),n.fill(),n.textAlign="center",n.textBaseline="middle",n.font="bold 10px arial",n.fillStyle="#404",n.fillText(i+"",o.x,o.y))});for(let[t,{p:r}]of Object.entries(e.vertices))n.fillStyle="#fed",3!=e.vertices[t].edges.length&&(n.fillStyle="red"),t==e.root&&(n.fillStyle="white"),n.strokeStyle="black",n.lineWidth=1,n.beginPath(),n.arc(r.x,r.y,d,0,2*Math.PI),n.fill(),n.stroke(),y("renderDebugId")&&(n.textAlign="center",n.textBaseline="middle",n.font="bold 9px arial",n.fillStyle="#000",n.fillText(t,r.x,r.y));y("renderLambda")&&(n.save(),n.fillStyle="white",n.globalAlpha=.2,n.fillRect(0,0,500,500),n.restore())}function m(e,t,n,r){e.strokeStyle="black",e.lineWidth=1,e.stroke(),e.save(),e.translate(t.x,t.y),e.rotate(Math.atan2(r.y-n.y,r.x-n.x)),e.beginPath(),e.moveTo(0,-3),e.lineTo(2,0),e.lineTo(0,3),e.lineTo(8,0),e.fillStyle="black",e.fill(),e.restore()}function p(e,t){const{d:n}=t;e.edges.forEach(t=>{if(null==t)return;const{a:r,b:o,m:i,tgt:a}=t;if(null==e.vertices[r])return;if(null==e.vertices[o])return;const c=e.vertices[r].p,s=e.vertices[o].p;n.beginPath(),n.moveTo(c.x,c.y),n.quadraticCurveTo(2*i.x-(c.x+s.x)/2,2*i.y-(c.y+s.y)/2,s.x,s.y),"b"==a?m(n,i,c,s):m(n,i,s,c)});for(let[t,r]of Object.entries(e.vertices)){if(null==r)return;const{p:o,t:i}=r;n.fillStyle=t==e.root?"#aaf":"app"==i?"white":"black",n.strokeStyle="black",n.lineWidth=1,n.beginPath(),n.arc(o.x,o.y,d,0,2*Math.PI),n.fill(),n.stroke()}document.getElementById("lambda").innerText=function e(t,n,r,o){switch(r.t){case"lam":{const i=String.fromCharCode(t+97),a="lam"==o?"":"Î»",c=e(t+1,n.concat([i]),r.b,"lam"),s=a+i+c.s;return{s:"lam"==o||"top"==o?s:"("+s+")",counter:c.counter}}case"app":{const i="lam"==o?".":"",a=e(t,n.slice(0,r.split),r.f,"appl"),c=e(a.counter,n.slice(r.split),r.arg,"appr"),s=i+a.s+" "+c.s;return{s:"appr"==o?"("+s+")":s,counter:c.counter}}case"var":return{s:n[0],counter:t}}}(0,[],function e(t){switch(t.t){case"lam":{const{e:n,size:r}=e(t.b);return{e:{t:"lam",b:n},size:r-1}}case"app":{const{e:n,size:r}=e(t.f),{e:o,size:i}=e(t.arg);return{e:{t:"app",f:n,arg:o,split:r},size:r+i}}case"var":return{e:t,size:1}}}(e.exp).e,"top").s}function y(e){return document.getElementById(e).checked}const v=new a.Loader;v.image("./img/example1.png","example1"),v.image("./img/example2.png","example2"),v.image("./img/example3.png","example3"),v.image("./img/cube.png","cube"),v.image("./img/dodecahedron.png","dodecahedron"),v.image("./img/prism.png","prism"),v.image("./img/tetrahedron.png","tetrahedron"),v.image("./img/tutte.png","tutte"),v.done(function(){const e=f("c1");e.d.drawImage(v.data.img.example1,0,0);const t=f("c2");function n(){document.getElementById("lambda").innerText="",t.d.clearRect(0,0,t.c.width,t.c.height);const n=e.d.getImageData(0,0,e.c.width,e.c.height),r=o.findConjoined(n);y("renderDebug")&&h(r,t);const a=i.findGraph(r),s=i.findRootedGraph(a);if(y("renderCyclic")&&function(e,t){const{d:n}=t;for(const t of Object.values(e.vertices)){const r=["red","green","blue"];t.edges.length<=3&&t.edges.forEach((o,i)=>{const a=e.edges[o.i].m,s=c.vplus(c.vscale(c.vnorm(c.vsub(a,t.p)),15),t.p);n.beginPath(),n.moveTo(t.p.x,t.p.y),n.lineTo(s.x,s.y),n.strokeStyle=r[i],n.lineWidth=3,n.lineCap="round",n.stroke()})}}(s,t),y("renderGraph")&&g(s,t),y("renderLambda"))try{p(i.findLambdaGraph(s),t)}catch(e){document.getElementById("lambda").innerHTML='<font color="red">All nodes must have exactly three edges to compute lambda graph.</font>',console.log(e),g(s,t)}}["renderDebug","renderDebugId","renderCyclic","renderGraph","renderLambda"].forEach(e=>{document.getElementById(e).addEventListener("change",n)});let r=void 0;function a(t){b.selectedIndex=-1,t=c.vint(t);const n=Array.from(document.getElementsByName("paint")).find(e=>e.checked).value,r=function(e){switch(e){case"node":return s;case"edge":return s/2;case"erase":return 2*s}}(n);e.d.fillStyle=function(e){switch(e){case"node":return"red";case"edge":return"blue";case"erase":return"white"}}(n),e.d.fillRect(t.x-r/2,t.y-r/2,r,r)}function l(t){const n=u(t,e.c);null!=r?function e(t,n){if(Math.max(Math.abs(t.x-n.x),Math.abs(t.y-n.y))<s/2)a(n);else{const r={x:Math.floor((t.x+n.x)/2),y:Math.floor((t.y+n.y)/2)};e(t,r),e(r,n)}}(r,n):a(n),r=n}function d(e){document.removeEventListener("mousemove",l),document.removeEventListener("mouseup",l),n()}function m(){e.d.fillStyle="white",e.d.fillRect(0,0,e.c.width,e.c.height)}document.getElementById("clear").addEventListener("click",()=>{m(),n()});const b=document.getElementById("examples");b.addEventListener("change",()=>{e.d.drawImage(v.data.img[b.value],0,0),n()}),e.c.addEventListener("mousedown",t=>{if(1!=t.buttons)return;const n=u(t,e.c);r=n,a(n),document.addEventListener("mousemove",l),document.addEventListener("mouseup",d)}),document.addEventListener("paste",t=>{Array.from(t.clipboardData.items).forEach(t=>{if("file"===t.kind){const r=t.getAsFile(),o=new FileReader;o.onload=(t=>{const r=new Image;"string"==typeof o.result&&(r.src=o.result,r.addEventListener("load",()=>{m(),e.d.drawImage(r,Math.floor((e.c.width-r.width)/2),Math.floor((e.c.height-r.height)/2)),n()}))}),o.readAsDataURL(r)}})}),n()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={r:255,g:255,b:255},o={r:255,g:0,b:0},i={r:0,g:0,b:255};function a(e,t,n){const r=4*(n*e.width+t);return{r:e.data[r],g:e.data[r+1],b:e.data[r+2]}}function c(e,t,n){const r=n*e.w+t;return e.data[r]}function s(e,t,n,r){const o=n*e.w+t;e.data[o]=r}function l(e,t){return e.r==t.r&&e.g==t.g&&e.b==t.b}t.findConjoined=function(e){let t=1;const n={},d={},u={};function f(e,t){d[t]||(d[t]={x:0,y:0},u[t]=0),d[t].x+=e.x,d[t].y+=e.y,u[t]++}function h(r,d,u){const h=t++;var g;n[h]=l(g=u,o)?"node":l(g,i)?"edge":"unknown";const p=[{x:r,y:d}];let y;for(;y=p.pop();){const{x:t,y:n}=y;c(m,t,n)||l(u,a(e,t,n))&&(s(m,t,n,h),f({x:t,y:n},h),p.push({x:t+1,y:n}),p.push({x:t-1,y:n}),p.push({x:t,y:n+1}),p.push({x:t,y:n-1}))}}const g=new Uint16Array(e.width*e.height),m={w:e.width,h:e.height,data:g};for(let t=0;t<m.w;t++)for(let n=0;n<m.h;n++){m.w;const o=a(e,t,n);l(o,r)||c(m,t,n)||h(t,n,o)}for(let e=1;e<t;e++)d[e].x/=u[e],d[e].y/=u[e];const p={};function y(e,t){e!=t&&(p[e]||(p[e]={}),p[e][t]=!0,p[t]||(p[t]={}),p[t][e]=!0)}for(let e=0;e<m.w-1;e++)for(let t=0;t<m.h-1;t++){const n=c(m,e,t);if(n){p[n]||(p[n]={});const r=c(m,e+1,t);r&&y(n,r);const o=c(m,e,t+1);o&&y(n,o)}}return{array:m,marks:n,avg:d,adjacent:p,numMarks:t-1}}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0));function i(e){return"a"==e?"b":"a"}function a(e,t){return e.edges[t.i][i(t.which)]}t.findGraph=function(e){const t={},n=[];for(let r=1;r<e.numMarks+1;r++)if("node"==e.marks[r])t[r]={p:e.avg[r],edges:[]};else if("edge"==e.marks[r]){const t=Object.keys(e.adjacent[r]);2==t.length&&n.push({a:t[0],b:t[1],m:e.avg[r]})}n.forEach((e,n)=>{t[e.a].edges.push({i:n,which:"a"}),t[e.b].edges.push({i:n,which:"b"})});for(let e of Object.values(t))e.edges.sort((t,r)=>{const o=n[t.i].m,i=n[r.i].m;return Math.atan2(o.x-e.p.x,o.y-e.p.y)-Math.atan2(i.x-e.p.x,i.y-e.p.y)});return{vertices:t,edges:n}},t.findRootedGraph=function(e){const t=Object.keys(e.vertices);t.sort((t,n)=>e.vertices[t].p.y-e.vertices[n].p.y);const n=t[0],r=e.vertices[n],a=r.edges[0],c=a.which,s=i(c),l=a.i,d=e.edges[a.i],u=d.m,f=d[s],h=e.vertices[f],g=e.edges.length;e.edges[l][s]=f,e.edges[l][c]="*",e.edges[l].m=o.vavg(h.p,u);const m={a:"",b:"",m:o.vavg(u,r.p)};m[s]="*",m[c]=n;const p=e.edges.concat([m]),y=[{i:l,which:c},{i:g,which:s}],v={};for(let[t,n]of Object.entries(e.vertices))v[t]=n;return v[n]={p:v[n].p,edges:v[n].edges.map(e=>e.i==l?{i:g,which:e.which}:e)},v["*"]={p:u,edges:y},{edges:p,vertices:v,root:"*"}},t.findLambdaGraph=function(e){function t(t){s[t.i]=Object.assign({},e.edges[t.i],{tgt:t.which})}function n(i,l){if(o--<=0)return{t:"var"};if(null!=c[i])return{t:"var"};const d=e.vertices[i].edges,u=d.findIndex(e=>e.i==l.i),f=d[(u+1)%3],h=d[(u+2)%3];return t(h),function(t,n){const r={},o=[t];let i;for(;i=o.pop();){if(i==n)return!0;r[i]||(r[i]=!0,e.vertices[i].edges.forEach(t=>{null==s[t.i]&&o.push(a(e,t))}))}return!1}(i,a(e,h))?r(i,f,h):function(r,o,i){const s=e.vertices[r];c[r]=Object.assign({},s,{t:"app"}),t(o);const l=n(a(e,o),o);return{t:"app",f:n(a(e,i),i),arg:l}}(i,f,h)}function r(t,r,o){const l=e.vertices[t];var d;return c[t]=Object.assign({},l,{t:"lam"}),s[(d=r).i]=Object.assign({},e.edges[d.i],{tgt:i(d.which)}),{t:"lam",b:n(a(e,o),o)}}let o=100;const c={},s=[];let l=e.root,d=e.vertices[l];const u=d.edges[0],f=d.edges[1];t(f);const h=r(l,u,f);return{vertices:c,edges:s,root:e.root,exp:h}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Loader=class{constructor(){this.k=(()=>{}),this.count=0,this.tasks=[],this.data={img:{},json:{}}}add(e){this.tasks.push(e),this.count--}done(e){this.k=e,this.tasks.forEach(e=>e())}image(e,t){this.add(()=>{var n=new Image;n.src=e,n.onload=(()=>{this.data.img[t]=n,this.succ()})})}succ(){0==++this.count&&this.k(this.data)}json_file(e,t){null==t&&(t=e+".json"),this.add(()=>{const n=new Request(t);fetch(n).then(e=>e.json()).then(t=>{this.data.json[e]=t,this.succ()}).catch(console.error)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,